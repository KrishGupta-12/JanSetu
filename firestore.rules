/**
 * @fileOverview Firestore Security Rules for the JanSetu application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and issue reports,
 * ensuring that only the authenticated user can create, read, update, or delete their own data.
 * Air quality sensors and disaster alerts are publicly readable but restricted for modification.
 *
 * Data Structure:
 * - `/users/{userId}/userProfile/{userProfileId}`: Stores user profile data, owned by the user.
 * - `/users/{userId}/issueReports/{issueReportId}`: Stores issue reports created by the user.
 * - `/airQualitySensors/{airQualitySensorId}`: Stores air quality sensor data (publicly readable).
 * - `/disasterAlerts/{disasterAlertId}`: Stores disaster alerts (publicly readable).
 *
 * Key Security Decisions:
 * - User profiles and issue reports are strictly owned by the authenticated user.
 * - Listing of all users is disallowed for privacy reasons.
 * - Air quality sensor data and disaster alerts are publicly accessible for read operations but restricted for write operations.
 * - The userProfileId must always match the userId for data consistency.
 *
 * Denormalization for Authorization:
 *  - UserProfile documents' `id` field must match the `userId` path segment, enforcing ownership.
 *  - IssueReport documents are stored under `/users/{userId}/issueReports/{issueReportId}`, making the user the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     *              This also verifies that the document exists.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profile documents.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - Authenticated user with matching userId and userProfileId.
     * @allow (get, update, delete) - Authenticated user with matching userId.
     * @deny (create) - Authenticated user with non-matching userId and userProfileId.
     * @deny (get, update, delete) - Unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId && userId == userProfileId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for issue reports documents.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - Authenticated user creating their own issue report.
     * @allow (get, update, delete) - Authenticated user accessing their own issue report.
     * @deny (create) - Authenticated user creating an issue report for another user.
     * @deny (get, update, delete) - Unauthenticated user or a different user trying to access the issue report.
     * @principle Enforces document ownership; only the owner can read/write.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for air quality sensor documents.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user can read air quality sensor data.
     * @deny (create, update, delete) - No one can create, update, or delete air quality sensor data.
     * @principle Public read access, restricted writes.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for disaster alert documents.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user can read disaster alert data.
     * @deny (create, update, delete) - No one can create, update, or delete disaster alert data.
     * @principle Public read access, restricted writes.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}