/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for public content with strict ownership and role-based access control for user data and administrative functions.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles. Each user can only manage their own profile.
 * - `/issueReports/{reportId}`: Stores issue reports submitted by citizens. Read access is public, but modifications are restricted to the report owner and administrators.
 * - `/superAdmins/{userId}`: A list of super administrators, keyed by their UID. Existence of a document grants super admin privileges. This collection is not intended to be listable by regular users.
 * - `/alerts/{alertId}`: Stores platform-wide alerts published by administrators. Read access is public; creation, updates, and deletion are restricted to super admins.
 * - `/leaderboard/{leaderboardId}`: Stores pre-calculated leaderboard data. Read access is public; write access is highly restricted.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent enumeration of user accounts.
 * - Public read access is granted to issue reports and alerts to maximize citizen awareness.
 * - Super admin privileges are granted based on the existence of a document in the `/superAdmins` collection.
 *
 * Denormalization for Authorization:
 * - Issue reports must include the `citizenId` to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @deny (list) User cannot list all users.
     * @principle Enforces user-ownership of profile data and prevents unauthorized listing.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Secure issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) All users can read and list issue reports.
     * @allow (create) Authenticated users can create issue reports if the citizenId matches their UID.
     * @allow (update, delete) Only the owner or a super admin can modify or delete issue reports.
     * @deny (create) Unauthenticated users cannot create issue reports.
     * @deny (update, delete) Users cannot modify or delete issue reports they don't own unless they are a super admin.
     * @principle Allows public read access but restricts modifications to the owner and super admins.
     */
    match /issueReports/{reportId} {
      function isOwner(report) {
        return request.auth.uid == report.citizenId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
       function isExistingOwner(report) {
        return isOwner(report) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && (isExistingOwner(resource.data) || isSuperAdmin());
      allow delete: if isSignedIn() && (isExistingOwner(resource.data) || isSuperAdmin());
    }

    /**
     * @description Secure super admin list.
     * @path /superAdmins/{userId}
     * @allow (get) Any authenticated user can check for the existence of a super admin.
     * @deny (list) Nobody can list the super admins.
     * @allow (create, update, delete) Only super admins can modify this collection.
     * @principle Restricts super admin management to existing super admins only.
     */
    match /superAdmins/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Secure platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) All users can read and list alerts.
     * @allow (create, update, delete) Only super admins can create, modify, or delete alerts.
     * @principle Allows public read access but restricts modifications to super admins.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin() && resource != null;
      allow delete: if isSignedIn() && isSuperAdmin() && resource != null;
    }

    /**
     * @description Secure the leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) All users can read and list the leaderboard.
     * @deny (create, update, delete) No one can modify the leaderboard through the client.
     * @principle Restricts leaderboard modifications to backend processes only.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}