/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership checks for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves or super admins.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only with proper authentication and authorization.
 * - /admins/{email}: Stores admin credentials, inaccessible to clients and intended for backend use only.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable but writable only by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable but writable only by super admins.
 *
 * Key Security Decisions:
 * - User listing is denied for security reasons.
 * - Admin credentials are not directly accessible to the client.
 * - Super admins have broad write access to alerts and leaderboard data.
 *
 * Denormalization for Authorization:
 * - Issue reports must contain a `citizenId` field to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user themselves or super admins can read/write their profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @deny (list) Always deny listing users.
     * @deny (get, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secure issue reports. Publicly readable, but writes are restricted to the report owner.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && request.resource.data.citizenId == request.auth.uid
     * @allow (update, delete) if isSignedIn() && isExistingOwner(resource.data.citizenId)
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read with owner-only writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.citizenId);
    }

     /**
      * @description Secure admin credentials.  These are only managed by backend processes.  Clients should not have access.
      * @path /databases/{database}/documents/admins/{email}
      */
    match /admins/{email} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure platform alerts. Publicly readable, but only super admins can create, update, or delete them.
     * @path /databases/{database}/documents/alerts/{alertId}
     */
    match /alerts/{alertId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'super_admin';
      }

       allow get, list: if true;
       allow create: if isSignedIn() && isAdmin();
       allow update: if isSignedIn() && isAdmin() && resource != null;
       allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Secure leaderboard data. Publicly readable, but only super admins can update it.
     * @path /databases/{database}/documents/leaderboard/{leaderboardId}
     */
    match /leaderboard/{leaderboardId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'super_admin';
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}