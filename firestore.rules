/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with varying levels of permissions for citizens, administrators, and super administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only with certain conditions.
 * - /superAdmins/{userId}:  Indicates super administrator status; only super admins can manage this collection.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable, but only admins can create them.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable, but only writable by a backend process.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Issue reports are publicly readable to facilitate transparency.
 * - Super admin status is managed through the /superAdmins collection.
 * - Leaderboard data is read-only for clients and must be written by a trusted environment.
 * - Role assignments are managed externally and are not modifiable through Firestore.
 *
 * Denormalization for Authorization:
 * - Issue Reports: Reports contain a `citizenId` field which allows for straightforward rule-based authorization, avoiding costly queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): Any user can read any profile.
     * @allow (create): A user can create their own profile if the UID matches the document ID.
     * @allow (update): A user can update their own profile.
     * @allow (delete): A user can delete their own profile.
     * @deny (create): A user cannot create a profile for another user.
     * @deny (update): A user cannot update another user's profile.
     * @deny (delete): A user cannot delete another user's profile.
     * @principle Enforces document ownership; users can only manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId);
      }
      function isNewOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      allow get, list: if true;
      allow create: if isNewOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list): Any user can read any report.
     * @allow (create): Any authenticated user can create a report. The citizenId field must match the user's UID.
     * @allow (update): Only the owner of the report can update it.
     * @allow (delete): Only the owner of the report can delete it.
     * @deny (create): Creating a report with a citizenId that does not match the user's UID is prohibited.
     * @deny (update): Updating a report owned by another user is prohibited.
     * @deny (delete): Deleting a report owned by another user is prohibited.
     * @principle Allows public read access to issue reports but enforces ownership for write operations.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.citizenId == request.auth.uid;
      }
      function isNewOwner() {
        return request.resource.data.citizenId == request.auth.uid;
      }
      function isExistingOwner() {
        return isSignedIn() && isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to super admin documents.
     * @path /superAdmins/{userId}
     * @allow (get, list): No one can list or get all super admins.
     * @allow (create, update, delete): Only existing super admins can manage other super admins.
     * @deny (create, update, delete): Non-super admins cannot create, update, or delete super admin documents.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
      allow get, list: if false;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list): Any user can read alerts.
     * @allow (create): Only super admins can create alerts. The adminId field must match the user's UID.
     * @allow (update, delete): No one can update or delete alerts once created.
     * @deny (create): Non-super admins cannot create alerts.
     * @deny (update): Alerts cannot be updated.
     * @deny (delete): Alerts cannot be deleted.
     * @principle Allows public read access but restricts creation to super admins.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list): Any user can read the leaderboard.
     * @allow (create, update, delete): No one should be able to create, update, or delete the leaderboard through client-side rules.
     * @deny (create, update, delete): All write operations are denied. Leaderboard updates should happen via a trusted backend.
     * @principle Allows public read access but restricts all write operations.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}