/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for public content with strict ownership and role-based access controls for user data and administrative functions.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles. Accessible with owner-only access.
 * - `/issueReports/{reportId}`: Stores citizen-submitted issue reports. Publicly readable, with owner-only access for modifications.
 * - `/superAdmins/{userId}`: Document existence grants super-admin role. Only super admins can manage.
 * - `/alerts/{alertId}`: Stores platform alerts. Publicly readable, with super-admin-only write access.
 * - `/leaderboard/{leaderboardId}`: Stores leaderboard data. Publicly readable, with restricted write access.
 *
 * Key Security Decisions:
 * - Users can only list their own profiles. Listing all users is disallowed.
 * - Public read access is granted to issue reports and platform alerts to maximize citizen awareness.
 * - Super admin role is determined by the existence of a document in the `/superAdmins` collection.
 *
 * Denormalization for Authorization:
 * - The `IssueReport` entity requires a `citizenId` to enforce owner-only updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, list, update, delete) Only the user with matching UID can access their profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (update, delete) Non-owners attempt to modify or delete a profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read issue reports.
     * @allow (create) Any signed-in user can create an issue report, and the citizenId must match their UID.
     * @allow (update, delete) Only the user who created the report can modify or delete it.
     * @deny (create) A user attempts to create a report with a mismatched citizenId.
     * @deny (update, delete) Non-owners attempt to modify or delete a report.
     * @principle Public read access with owner-only writes.
     */
    match /issueReports/{reportId} {
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.citizenId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.citizenId) && resource != null;
    }

    /**
     * @description Controls access to super admin list.
     * @path /superAdmins/{userId}
     * @allow (get) Any authenticated user can check for super admin status.
     * @allow (create, update, delete) Only existing super admins can manage the list.
     * @deny (create, update, delete) Non-super admins attempt to modify the list.
     * @principle Restricts management of super admins to existing super admins.
     */
    match /superAdmins/{userId} {
        function isSuperAdmin() {
            return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin() && resource != null;
        allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read platform alerts.
     * @allow (create, update, delete) Only super admins can create, update, or delete alerts.
     * @deny (create, update, delete) Non-super admins attempt to manage alerts.
     * @principle Public read access with super-admin-only writes.
     */
    match /alerts/{alertId} {
      function isSuperAdmin() {
          return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Controls access to the leaderboard.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Anyone can read the leaderboard.
     * @allow (create, update, delete) Only super admins can modify the leaderboard.
     * @deny (create, update, delete) Non-super admins attempt to modify the leaderboard.
     * @principle Public read access with restricted write access.
     */
    match /leaderboard/{leaderboardId} {
      function isSuperAdmin() {
          return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }
  }
}