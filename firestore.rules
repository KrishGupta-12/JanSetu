/**
 * @fileoverview Firestore Security Rules for the Citizen Problem Reporting Application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints.
 * Users can read public data, but modifications are restricted based on their role and ownership.
 * Super admins have broad access, while other admins and citizens have more limited privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  `userId` must match the authenticated user's UID.
 * - /issueReports/{reportId}: Stores issue reports. Open read, writes restricted to owners or super admins.
 * - /superAdmins/{userId}: Indicates super admin status. Document ID must match the user's UID.
 * - /alerts/{alertId}: Stores platform alerts, write-only for super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, write-only for super admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Super admin status is determined by the presence of a document in `/superAdmins/{userId}`.
 * - Read-only collections like `/leaderboard` are readable by anyone.
 *
 * Denormalization for Authorization:
 * - The `IssueReport` entity does NOT currently have fields for role-based assignments or shared access. To grant editing access to specific admins, the `IssueReport` documents should include a field, `assignedAdminId`, that corresponds to the admin's UID.  This will allow for simpler, more performant rules without needing extra `get()` calls.
 *
 * Structural Segregation:
 * - Private user data (profile information) is stored under `/users/{userId}`, separate from public data like `/issueReports`. This allows for different access controls for each type of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is a super admin by verifying the existence of a document in /superAdmins/{userId}.
     */
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the existing document
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User creates their profile with matching UID.
     * @allow (get, list, update, delete) User accesses their own profile.
     * @deny (create) User attempts to create a profile for another user.
     * @deny (update, delete) User attempts to modify or delete another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read issue reports.
     * @allow (create) Any signed-in user can create an issue report, and the `citizenId` must match their UID.
     * @allow (update) Only super admins or the report owner can update.
     * @allow (delete) Only super admins or the report owner can delete.
     * @deny (create) If the `citizenId` does not match the authenticated user's UID.
     * @principle Allows public read access with restricted writes based on ownership or super admin status.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if (isSuperAdmin() || (isSignedIn() && resource.data.citizenId == request.auth.uid)) && resource != null;
      allow delete: if (isSuperAdmin() || (isSignedIn() && resource.data.citizenId == request.auth.uid)) && resource != null;
    }

    /**
     * @description Rules for super admin list.
     * @path /superAdmins/{userId}
     * @allow (get) Only the super admin can read their own super admin document.
     * @allow (create) Only a super admin can create a super admin document for themselves. This is for initialization purposes.
     * @deny (list, update, delete) No listing, updates or deletes allowed.
     * @principle Only super admins can manage the list of super admins.
     */
    match /superAdmins/{userId} {
      allow get: if isOwner(userId) && isSuperAdmin();
      allow create: if isSuperAdmin() && isOwner(userId);
      allow list, update, delete: if false;
    }

    /**
     * @description Rules for platform alerts.
     * @path /alerts/{alertId}
     * @allow (create) Only super admins can create alerts. The adminId must match their UID.
     * @allow (get, list) Anyone can read platform alerts.
     * @deny (update, delete) No updates or deletes allowed.
     * @principle Restricts alert creation to super admins, allows public read access.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSuperAdmin() && request.resource.data.adminId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the leaderboard.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Anyone can read the leaderboard.
     * @allow (update) Only super admins can update the leaderboard.
     * @deny (create, delete) No creation or deletion allowed.
     * @principle Allows public read access with restricted writes to super admins.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow update: if isSuperAdmin() && resource != null;
      allow create, delete: if false;
    }
  }
}