/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with specific rules for user profiles, issue reports, administrator credentials, platform alerts, and the leaderboard.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owner.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only with a valid citizenId that matches the authenticated user.
 * - /admins/{email}: Stores administrator credentials; write access is completely restricted to prevent unauthorized modification.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable, but only writable by authenticated administrators with a valid adminId.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable, but write operations are denied to all users.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Administrator credentials can only be managed through the Firebase Admin SDK, not directly modified by clients.
 * - Public read access is granted to issue reports, alerts, and the leaderboard to maximize transparency.
 *
 * Denormalization for Authorization:
 * - Issue reports require the citizenId field to match the authenticated user's UID for write operations.
 * - Alerts require the adminId field to match the authenticated user's UID for write operations.
 *
 * Structural Segregation:
 * - No structural segregation is used in this configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) User with UID 'user123' can get, update, and delete their own profile.
     * @deny (create, update, delete) User with UID 'user456' cannot create, update, or delete the profile of user 'user123'.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership: users can only manage their own profile data.
     */
    match /users/{userId} {
      //function isOwner(userId){
        //return request.auth.uid == userId;
      //}

      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to issue report documents.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read issue reports.
     * @allow (create) User with UID 'user123' can create an issue report with citizenId 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete issue report with citizenId 'user123' ONLY if the document exists.
     * @deny (create, update, delete) User with UID 'user456' cannot create, update, or delete issue reports with citizenId 'user123'.
     * @principle Public read access, owner-only writes with citizenId validation.
     */
    match /issueReports/{reportId} {

      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }
      function isExistingOwner(citizenId) {
          return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Restricts access to administrator credential documents.
     * @path /admins/{email}
     * @deny (get, list, create, update, delete) No client-side access is allowed.
     * @principle Prevents unauthorized modification of admin credentials.  These should only be modified via the Firebase Admin SDK.
     */
    match /admins/{email} {
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to platform alert documents.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read platform alerts.
     * @allow (create) Only authenticated admins can create alerts with a matching adminId.
     * @allow (update, delete) Only authenticated admins can update/delete alerts with a matching adminId if the document exists.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete alerts.
     * @principle Public read access, admin-only writes with adminId validation.
     */
    match /alerts/{alertId} {

      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin(adminId) {
        return request.auth.uid == adminId;
      }
      function isExistingAdmin(adminId) {
        return isAdmin(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin(request.resource.data.adminId);
      allow update: if isSignedIn() && isExistingAdmin(resource.data.adminId);
      allow delete: if isSignedIn() && isExistingAdmin(resource.data.adminId);
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Any user can read the leaderboard data.
     * @deny (create, update, delete) No user can create, update, or delete the leaderboard data.
     * @principle Public read access, no write access.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}