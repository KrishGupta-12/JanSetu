/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a role-based access control (RBAC) model with ownership checks for user-specific data.
 * Super admins have elevated privileges, while other roles (waste_admin, pothole_admin, etc.) may be added in the future.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Access is restricted to the user themselves and super admins.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.  Public read access, with owner-only writes.
 * - /superAdmins/{userId}: Indicates super admin status.  Only super admins can manage this collection.
 * - /alerts/{alertId}: Stores platform-wide alerts. Public read, super admin writes.
 * - /leaderboard/{leaderboardId}: Stores pre-calculated leaderboard data. Public read, super admin writes.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - All write operations require authentication.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `IssueReport` entity requires a `citizenId` field to enforce owner-only writes, even with public reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list): Allows the user to read their own profile. Allows super admins to read any profile.
     * @allow (create): Allows a user to create their own profile if the UID matches.
     * @allow (update, delete): Allows the user to update or delete their own profile. Allows super admins to update or delete any profile.
     * @deny (create): Denies creation if the user ID in the path does not match the authenticated user's ID.
     * @deny (update, delete): Denies update or delete if the user is not the owner and not a super admin.
     * @principle Enforces document ownership and role-based access for user profiles.
     */
    match /users/{userId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isSuperAdmin();
      allow list: if false; // Disable listing of all users.

      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;

      allow update: if isExistingOwner(userId) || isSuperAdmin() && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId) || isSuperAdmin();
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list): Allows anyone to read issue reports.
     * @allow (create): Allows any authenticated user to create an issue report, provided the citizenId matches their UID.
     * @allow (update, delete): Allows the owner of the report to update or delete it.
     * @deny (create): Denies creation if the citizenId does not match the authenticated user's ID.
     * @deny (update, delete): Denies update or delete if the user is not the owner.
     * @principle Allows public read access with owner-only writes for issue reports.  Enforces that only the report creator can modify or delete it.
     */
    match /issueReports/{reportId} {
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Controls access to the superAdmins collection.
     * @path /superAdmins/{userId}
     * @allow (get, list): Allows only super admins to read the list of super admins.
     * @allow (create, update, delete): Allows only existing super admins to manage other super admins.
     * @deny (create, update, delete): Denies non-super admins from creating, updating, or deleting super admin records.
     * @principle Restricts management of super admin privileges to existing super admins.
     */
    match /superAdmins/{userId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
      allow get, list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to the alerts collection.
     * @path /alerts/{alertId}
     * @allow (get, list): Allows anyone to read alerts.
     * @allow (create): Allows only super admins to create alerts.
     * @allow (update, delete): Allows only super admins to update or delete alerts.
     * @deny (create, update, delete): Denies non-super admins from creating, updating, or deleting alerts.
     * @principle Allows public read access with super admin-only writes for platform alerts.
     */
    match /alerts/{alertId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to the leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list): Allows anyone to read the leaderboard.
     * @allow (create, update, delete): Allows only super admins to modify the leaderboard.
     * @deny (create, update, delete): Denies non-super admins from creating, updating, or deleting the leaderboard.
     * @principle Allows public read access with super admin-only writes for leaderboard data.
     */
    match /leaderboard/{leaderboardId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    //-------------------Reusable functions----------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}