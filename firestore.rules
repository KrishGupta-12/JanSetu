/**
 * @fileoverview Firestore Security Rules for Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles.
 * Issue reports are publicly readable but writable only by their creators.
 * Administrative access is managed via a separate collection and role-based checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the userId matching the Firebase Auth UID.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.
 * - /admins/{email}: Stores admin credentials, keyed by email, defining their roles and departments.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Issue reports are publicly readable, enabling broad access for citizens and admins.
 * - Only authenticated users can create issue reports.
 * - Only the user who created an issue report can update or delete it.
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 *  None used.
 *
 * Structural Segregation:
 *  Private user data (profiles) is stored under /users/{userId}, while public issue reports are stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read issue reports.
     * @allow (create) Authenticated users can create issue reports, with citizenId matching their UID.
     * @allow (update, delete) Only the user who created the report can update or delete it.
     * @deny (create) Unauthenticated users cannot create issue reports.
     * @deny (update, delete) Users cannot update or delete issue reports they didn't create.
     * @principle Public read access with owner-only writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isReportOwner() {
        return request.auth.uid == resource.data.citizenId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isReportOwner();
      allow delete: if isSignedIn() && isReportOwner();
    }

    /**
     * @description Controls access to administrator credentials.
     * @path /admins/{email}
     * @deny get: if false; // Listing all admins is not allowed.
     * @deny list: if false; // Listing all admins is not allowed.
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Restricts access to administrator credentials.
     */
    match /admins/{email} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}