/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with user-specific data segregation.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible to all for reading, but only writable by the user themselves.
 * - /issueReports/{reportId}: Stores issue reports. Readable by anyone, but writable only by super admins or with validation of citizen ownership.
 * - /superAdmins/{userId}: Documents indicating super admin status. Only super admins can create or modify these.
 * - /alerts/{alertId}: Stores platform alerts. Readable by anyone, writable only by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Readable by anyone, writable only by super admins.
 *
 * Key Security Decisions:
 * - User profiles are readable by everyone but only writable by the user themselves.
 * - Issue reports are publicly readable but writable with ownership validation and/or super admin privileges.
 * - Only super admins can manage super admin roles.
 * - Only super admins can create or modify platform alerts and leaderboard data.
 * - Listing of users and super admins is disallowed to prevent information disclosure.
 *
 * Denormalization for Authorization:
 * - The issue report includes `citizenId` to quickly check ownership for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to user profiles and write access only to the owning user.
     * @path /users/{userId}
     * @allow (get, list) - Any user can read any profile.
     * @allow (create, update, delete) - Only the user with matching UID can modify their own profile.
     * @deny (create, update, delete) - Any user attempting to modify another user's profile.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows read access to issue reports for everyone. Writes are restricted to super admins or validated citizen ownership.
     * @path /issueReports/{reportId}
     * @allow (get, list) - Any user can read any issue report.
     * @allow (create) - Any authenticated user can create a report with a matching citizenId.
     * @allow (update, delete) - Only super admins can update/delete reports.
     * @deny (create, update, delete) - Non-super admins attempting to modify or delete reports without proper ownership.
     * @principle Allows public reads, enforces ownership or admin privileges for writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
        
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Manages super admin status. Only super admins can manage other super admins.
     * @path /superAdmins/{userId}
     * @allow (get) - Any authenticated user can check if a super admin exists
     * @allow (create, update, delete) - Only existing super admins can grant or revoke super admin status.
     * @deny (create, update, delete) - Non-super admins attempting to manage super admins.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isSuperAdmin() {
          return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }

        allow get: if isSignedIn();
        allow list: if false;
        
        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin() && resource != null;
        allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Allows read access to platform alerts for everyone. Only super admins can create, update or delete alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any user can read any alert.
     * @allow (create, update, delete) - Only super admins can create, update, and delete alerts.
     * @deny (create, update, delete) - Non-super admins attempting to manage alerts.
     * @principle Allows public reads, restricts writes to super admins.
     */
    match /alerts/{alertId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
        
      allow get: if true;
      allow list: if true;
        
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Allows read access to leaderboard data for everyone. Only super admins can update the leaderboard.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) - Any user can read the leaderboard data.
     * @allow (create, update, delete) - Only super admins can create, update, and delete leaderboard data.
     * @deny (create, update, delete) - Non-super admins attempting to manage the leaderboard.
     * @principle Allows public reads, restricts writes to super admins.
     */
    match /leaderboard/{leaderboardId} {
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
        
      allow get: if true;
      allow list: if true;

      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }
  }
}