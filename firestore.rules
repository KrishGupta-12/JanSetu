/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public accessibility with role-based and ownership-based restrictions.
 * Public data (e.g., issue reports, alerts) is readable by all, while write access is strictly controlled via roles and ownership.
 * User-specific data (e.g., user profiles) is private and accessible only to the user themselves.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /issueReports/{reportId}: Issue reports submitted by citizens, publicly readable, writable by admins or the report creator, depending on status.
 * - /superAdmins/{userId}: Super admin list; presence grants super admin privileges. Only accessible by super admins.
 * - /alerts/{alertId}: Platform alerts, publicly readable, writable only by super admins.
 * - /leaderboard/{leaderboardId}: Leaderboard data, publicly readable, writable only by super admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to /issueReports and /alerts to facilitate open data sharing.
 * - Super admin role is determined by the presence of a document in /superAdmins/{userId}.
 * - Data validation is relaxed to prioritize rapid prototyping, focusing solely on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - Issue reports contain a `citizenId` field to easily verify ownership for updates.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users collection to ensure privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @example isSignedIn() == true if request.auth != null
     * @principle Requires authentication for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner("someUserId") == (request.auth.uid == "someUserId")
     * @principle Enforces user ownership for data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is a super admin by verifying the existence of a document in the /superAdmins collection.
     * @example isSuperAdmin() == exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid))
     * @principle Grants elevated privileges to super admins.
     */
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @example isExistingOwner("someUserId") == (isOwner("someUserId") && resource != null)
     * @principle Combines ownership and existence checks for safer destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Determines if the current user is assigned to a specific issue report.
     * @param {string} adminId - The admin ID to compare against.
     * @example isAdminForIssue(resource.data.assignedAdminId)
     * @principle Enforces document ownership for writes.
     */
    function isAdminForIssue(adminId) {
       return isSignedIn() && request.auth.uid == adminId;
    }


    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User "user123" creates their own profile.
     * @allow (get) User "user123" reads their own profile.
     * @deny (update) User "user456" tries to update user "user123"'s profile.
     * @deny (delete) Any user tries to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for issue reports.
     * @path /issueReports/{reportId}
     * @allow (get) Any user can read any issue report.
     * @allow (list) Any user can list issue reports.
     * @allow (create) User "user123" creates an issue report with their ID.
     * @allow (update) Admin with ID "admin456" updates an issue report they are assigned to.
     * @allow (delete) Only the super admin can delete.
     * @deny (create) User "user123" tries to create an issue report with a mismatched ID.
     * @deny (update) User "user456" tries to update an issue report they don't own.
     * @principle Public read, owner-only writes, super admin delete.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if (isAdminForIssue(resource.data.assignedAdminId) || isSuperAdmin());
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Rules for super admin list.
     * @path /superAdmins/{userId}
     * @allow (get) Super admin "admin123" reads their own super admin document.
     * @allow (create) Super admin "admin123" creates their super admin document.
     * @deny (get) Regular user "user456" tries to read a super admin document.
     * @deny (create) Regular user "user456" tries to create a super admin document.
     * @principle Only super admins can manage the super admin list.
     */
    match /superAdmins/{userId} {
      allow get: if isSuperAdmin();
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if false;
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Rules for platform alerts.
     * @path /alerts/{alertId}
     * @allow (get) Any user can read any alert.
     * @allow (list) Any user can list alerts.
     * @allow (create) Super admin "admin123" creates an alert.
     * @deny (create) Regular user "user456" tries to create an alert.
     * @deny (update) Any user tries to update an alert.
     * @deny (delete) Any user tries to delete an alert.
     * @principle Public read, super admin-only writes.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if false;
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Rules for leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get) Any user can read the leaderboard.
     * @allow (list) Any user can list the leaderboard (though there should only be one document).
     * @allow (create) Super admin "admin123" creates the leaderboard.
     * @deny (create) Regular user "user456" tries to create the leaderboard.
     * @deny (update) Any user tries to update the leaderboard.
     * @deny (delete) Any user tries to delete the leaderboard.
     * @principle Public read, super admin-only writes.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
  }
}