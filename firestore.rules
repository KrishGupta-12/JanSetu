/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model.
 * - Users can only read and write their own profile data.
 * - Super admins have broad access to manage users, alerts, and the leaderboard.
 * - Issue reports are publicly readable but writable only by authenticated users (citizens and admins).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable, writable by authenticated users.
 * - /superAdmins/{userId}: Documents indicating super admin status.
 * - /alerts/{alertId}: Stores platform-wide alerts, only writable by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, only writable by super admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Super admin status is determined by the existence of a document in the `/superAdmins` collection.
 * - Schema validation is relaxed to facilitate rapid prototyping, focusing only on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * Super admin status is determined by the presence of a document in the `/superAdmins/{userId}` collection, avoiding the need to store the role in the user profile document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner.  Useful for update/delete checks.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user is a super admin by verifying the existence of their UID in the /superAdmins collection.
      */
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data.uid: 'user123'
     * @allow (get) User with UID 'user123' reads their own profile.
     *   request.auth.uid: 'user123'
     * @allow (update) User with UID 'user123' updates their own profile.
     *   request.auth.uid: 'user123'
     * @deny (create) User with UID 'user123' tries to create a profile for 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.uid: 'user456'
     * @deny (list) Any user tries to list all user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for issue reports.
     * @path /issueReports/{reportId}
     * @allow (get) Any user can read an issue report.
     * @allow (list) Any user can list issue reports.
     * @allow (create) Authenticated user creates a new issue report with their UID as citizenId.
     *   request.auth.uid: 'user123'
     *   request.resource.data.citizenId: 'user123'
     * @deny (update) Non-owner tries to update an issue report.
     *   request.auth.uid: 'user456'
     *   resource.data.citizenId: 'user123'
     * @principle Allows public read access to issue reports, enforces authentication for writes.
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Rules for super admin list.
     * @path /superAdmins/{userId}
     * @allow (get) Any user can check if a user is super admin.
     * @allow (create) Only a super admin can add another super admin.
     *   request.auth.uid: 'superAdmin123' (where superAdmin123 is a super admin)
     * @deny (update) Non-super admin tries to modify the super admin list.
     *   request.auth.uid: 'user123'
     * @deny (delete) Non-super admin tries to delete a super admin entry.
     *   request.auth.uid: 'user123'
     *  @deny (list) Any user tries to list all superAdmins.
     * @principle Restricts management of super admins to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if false;
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Rules for platform alerts.
     * @path /alerts/{alertId}
     * @allow (get) Any user can read a platform alert.
     * @allow (list) Any user can list platform alerts.
     * @allow (create) Only a super admin can create a platform alert.
     *   request.auth.uid: 'superAdmin123' (where superAdmin123 is a super admin)
     * @deny (update) Non-super admin tries to update a platform alert.
     *   request.auth.uid: 'user123'
     * @deny (delete) Non-super admin tries to delete a platform alert.
     *   request.auth.uid: 'user123'
     * @principle Restricts management of platform alerts to super admins.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

     /**
      * @description Rules for the leaderboard.
      * @path /leaderboard/{leaderboardId}
      * @allow (get) Any user can read the leaderboard.
      * @allow (list) Any user can list the leaderboard.
      * @allow (create) Only a super admin can create/update the leaderboard.
      *   request.auth.uid: 'superAdmin123' (where superAdmin123 is a super admin)
      * @deny (update) Non-super admin tries to update the leaderboard.
      *   request.auth.uid: 'user123'
      * @deny (delete) Non-super admin tries to delete the leaderboard.
      *   request.auth.uid: 'user123'
      * @principle Restricts management of the leaderboard to super admins.
      */
    match /leaderboard/{leaderboardId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin() && resource != null;
        allow delete: if false;
    }
  }
}