/**
 * @file Firebase Security Rules for JanSetu Application
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and issue reports,
 *              while allowing public read access to air quality sensors and disaster alerts.
 *
 * @dataStructure
 *  - /users/{userId}/userProfile/{userProfileId}: User profiles owned by individual users. The `userProfileId` must match the `userId`.
 *  - /users/{userId}/issueReports/{issueReportId}: Issue reports submitted by users.
 *  - /airQualitySensors/{airQualitySensorId}: Publicly accessible air quality sensor data.
 *  - /disasterAlerts/{disasterAlertId}: Publicly accessible disaster alert information.
 *
 * @keySecurityDecisions
 *  - User profiles and issue reports are strictly owned by the user identified in the path.
 *  - Only the owner can create, update, or delete their user profile or issue reports.
 *  - Listing of issue reports is restricted to the owner.
 *  - Air quality sensors and disaster alerts are publicly readable. Writes are disallowed for prototyping.
 *  - Data validation is relaxed during prototyping, focusing on authorization and relationship integrity.
 *
 * @denormalizationForAuthorization
 *  - The user ID is implicitly denormalized into the path for user profiles and issue reports, enabling
 *    efficient ownership checks without additional `get()` calls.
 *
 * @structuralSegregation
 *  - User-specific data (profiles, reports) is stored under `/users/{userId}` to enforce privacy and ownership.
 *  - Public data (sensors, alerts) is stored at the root level for open access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information, ensuring only the owner can read and write.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - User with ID 'user123' creates their profile at /users/user123/userProfile/user123.
     * @allow (get, update, delete) - User with ID 'user123' reads, updates, or deletes their profile at /users/user123/userProfile/user123.
     * @deny (create) - User with ID 'user123' attempts to create a profile for user 'otherUser' at /users/otherUser/userProfile/otherUser.
     * @deny (get, update, delete) - User with ID 'user123' attempts to read, update, or delete the profile of user 'otherUser' at /users/otherUser/userProfile/otherUser.
     * @principle Enforces document ownership for writes. Validates relational integrity between path and document data.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      // Allow the user to list their own profile (there will only be one).
      allow list: if isOwner(userId);

      // Allow the user to create their own profile, validating that the IDs match.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;

      // Allow the user to update their own profile, enforcing immutability of the user ID.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages issue reports submitted by users, ensuring only the owner can read and write.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - User 'user123' creates an issue report under their ID at /users/user123/issueReports/report1.
     * @allow (get, update, delete) - User 'user123' manages their issue report at /users/user123/issueReports/report1.
     * @deny (create) - User 'user123' attempts to create an issue report under another user's ID at /users/otherUser/issueReports/report1.
     * @deny (get, update, delete) - User 'user123' attempts to manage an issue report owned by 'otherUser' at /users/otherUser/issueReports/report1.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      // Allow the owner to read their issue reports.
      allow get: if isOwner(userId);
      // Allow the owner to list their own issue reports.
      allow list: if isOwner(userId);
      // Allow the user to create issue reports under their user ID.
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Allow the owner to update their own issue reports.
      allow update: if isExistingOwner(userId);
      // Allow the owner to delete their own issue reports.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to air quality sensor data.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user, signed in or not, can read air quality sensor data.
     * @deny (create, update, delete) - No user can create, update, or delete air quality sensor data.
     * @principle Provides public read access to sensor data.
     */
    match /airQualitySensors/{airQualitySensorId} {
      // Allow anyone to read air quality sensor data.
      allow get, list: if true;

      // Prevent anyone from creating, updating, or deleting sensor data (for prototyping).
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to disaster alert information.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user, signed in or not, can read disaster alert information.
     * @deny (create, update, delete) - No user can create, update, or delete disaster alert information.
     * @principle Provides public read access to disaster alert information.
     */
    match /disasterAlerts/{disasterAlertId} {
      // Allow anyone to read disaster alerts.
      allow get, list: if true;

      // Prevent anyone from creating, updating, or deleting alerts (for prototyping).
      allow create, update, delete: if false;
    }
  }
}

/**
 * @description Checks if the request is made by an authenticated user.
 * @return {bool} True if the user is signed in, false otherwise.
 */
function isSignedIn() {
  return request.auth != null;
}

/**
 * @description Checks if the authenticated user is the owner of the resource based on the provided user ID.
 * @param {string} userId The user ID to compare against the authenticated user's ID.
 * @return {bool} True if the user is the owner, false otherwise.
 */
function isOwner(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

/**
 * @description Checks if the authenticated user is the owner of an *existing* resource.
 * @param {string} userId The user ID to compare against the authenticated user's ID.
 * @return {bool} True if the user is the owner and the resource exists, false otherwise.
 */
function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
}