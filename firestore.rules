/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Accessible only to the owner.
 * - /issueReports/{reportId}: Stores issue reports. Publicly readable, writable only by the report creator.
 * - /superAdmins/{userId}: Indicates super admin status. Only super admins can manage this collection.
 * - /alerts/{alertId}: Stores platform alerts. Only admins can create alerts. Publicly readable.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Publicly readable, writable by a backend process.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Issue reports are publicly readable but can only be created by authenticated users, and only updated/deleted by their author.
 * - Super admin status is managed exclusively through the /superAdmins collection.
 * - Alerts can only be created by admins.
 * - Leaderboard data is publicly readable but cannot be modified directly by clients.
 * - Listing of the `/users` collection is denied to prevent data leakage.
 *
 * Denormalization for Authorization:
 * - Alerts include `adminId` to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner("someUserId") == (request.auth.uid == "someUserId")
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     *              Combines ownership check with existence check.
     * @param {string} userId - The user ID to compare against.
     * @example isExistingOwner("someUserId") == (isOwner("someUserId") && resource != null)
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Checks if the user is a super admin.
     * @example isSuperAdmin() == exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid))
     */
    function isSuperAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }
    
    /**
     * @description Grants access to a role in Firestore.
     * @param {string} role - The role to check for (e.g., "super_admin").
     * @example hasRole("super_admin") == (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "super_admin")
     */
    function hasRole(role) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Checks if the user is an admin (any role besides "citizen").
     * @example isAdmin() == (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != "citizen")
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != "citizen";
    }
    

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile if request.auth.uid == 'user123' and request.resource.data.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, or delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Only the user can read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Only the user can create their own profile, and the uid must match the document ID.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Only the user can update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Only the user can delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) - Any user can read issue reports.
     * @allow (create) - Authenticated user can create a report with citizenId matching their UID.
     * @allow (update, delete) - Only the user who created the report can update or delete it.
     * @deny (create) - Unauthenticated users cannot create reports.
     * @deny (update, delete) - Other users cannot update or delete someone else's report.
     * @principle Allows public reads but enforces ownership for writes on issue reports.
     */
    match /issueReports/{reportId} {
      // Anyone can read issue reports.
      allow get, list: if true;

      // Only authenticated users can create issue reports.
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;

      // Only the user who created the report can update or delete it.
      allow update, delete: if isSignedIn() && resource.data.citizenId == request.auth.uid;
    }

    /**
     * @description Rules for super admin management.
     * @path /superAdmins/{userId}
     * @allow (get, list) - Only super admins can list or get documents.
     * @allow (create, update, delete) - Only existing super admins can create, update, or delete super admin roles.
     * @deny (create, update, delete) - Non-super admins cannot modify super admin roles.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
        allow get, list: if isSuperAdmin();
        allow create, update, delete: if isSuperAdmin();
    }

    /**
     * @description Rules for platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - Anyone can read platform alerts.
     * @allow (create) - Only admins can create alerts, with adminId matching their UID.
     * @deny (create) - Non-admins cannot create alerts.
     * @deny (update, delete) - No one can update or delete alerts (intended to be immutable).
     * @principle Allows public reads but restricts alert creation to admins.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin() && request.resource.data.adminId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Rules for the leaderboard.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) - Anyone can read the leaderboard.
     * @deny (create, update, delete) - No one can create, update, or delete the leaderboard via the client.
     * @principle Allows public reads but restricts writes to a backend process.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}