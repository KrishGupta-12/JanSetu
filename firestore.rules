/**
 * @fileoverview Firestore Security Rules for JanSetu application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and issue reports.
 * Air quality sensors and disaster alerts are publicly readable but not writable by regular users.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}/userProfile/{userProfileId}, where userProfileId must equal userId.
 * - Issue reports are stored under /users/{userId}/issueReports/{issueReportId}, associating them with a specific user.
 * - Air quality sensor data is stored under /airQualitySensors/{airQualitySensorId}.
 * - Disaster alerts are stored under /disasterAlerts/{disasterAlertId}.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections (airQualitySensors, disasterAlerts) are publicly readable.
 * - Data validation is minimal during the prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - UserProfile and IssueReport entities both include a `userProfileId` to simplify ownership checks and ensure
 *   Authorization Independence.
 *
 * Structural Segregation:
 * - Private user data (profiles, reports) is stored under the /users/{userId} collection, separate from
 *   publicly readable data (airQualitySensors, disasterAlerts).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profile data.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - User 'abc' can create their own profile at /users/abc/userProfile/abc.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete their profile at /users/abc/userProfile/abc.
     * @deny (create, get, update, delete) - User 'def' cannot access user 'abc' profile at /users/abc/userProfile/abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User profiles are not listable.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to issue reports created by a user.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - User 'abc' can create an issue report under /users/abc/issueReports/{issueReportId}.
     * @allow (get, update, delete) - User 'abc' can read, update, or delete their issue report under /users/abc/issueReports/{issueReportId}.
     * @deny (create, get, update, delete) - User 'def' cannot access user 'abc' issue reports under /users/abc/issueReports/{issueReportId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to air quality sensor data, but restricts writes.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user can read air quality sensor data.
     * @deny (create, update, delete) - No user can create, update, or delete air quality sensor data.
     * @principle Provides public read access while restricting write access.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to disaster alerts, but restricts writes.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user can read disaster alerts.
     * @deny (create, update, delete) - No user can create, update, or delete disaster alerts.
     * @principle Provides public read access while restricting write access.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}