/**
 * @fileoverview Firestore Security Rules for JanSetu application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and issue reports.
 * Air quality sensors and disaster alerts are publicly readable but not writable directly through the client.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}/userProfile/{userProfileId}, ensuring only the user can manage their profile.
 * - Issue reports are stored under /users/{userId}/issueReports/{issueReportId}, restricting report creation, modification, and deletion to the owning user.
 * - Air quality sensor data and disaster alerts are stored at the root level for public access.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profiles and issue reports.
 * - Listing of issue reports is restricted to the owner only.
 * - Public read access is granted for air quality sensors and disaster alerts, but write access is denied to clients.
 * - Data validation is limited to critical authorization and relational integrity checks during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Only the authenticated user can create, read, update, or delete their own profile.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc' and request.resource.data.id == 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete their profile at /users/abc/userProfile/abc if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile under /users/abc/userProfile/abc.
     * @deny (get, update, delete) - User 'def' cannot get, update, or delete the profile at /users/abc/userProfile/abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User profiles are not meant to be listed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages issue reports. Only the authenticated user can create, read, update, or delete their own reports.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - User 'abc' can create an issue report under /users/abc/issueReports/{reportId} if request.auth.uid == 'abc' and request.resource.data.userProfileId == 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete their issue report at /users/abc/issueReports/{reportId} if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create an issue report under /users/abc/issueReports/{reportId}.
     * @deny (get, update, delete) - User 'def' cannot get, update, or delete the issue report at /users/abc/issueReports/{reportId}.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Provides public read access to air quality sensor data, but restricts write access.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user, authenticated or not, can read air quality sensor data.
     * @deny (create, update, delete) - No user can create, update, or delete air quality sensor data.
     * @principle Allows public read access while restricting write access to prevent unauthorized modifications.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Provides public read access to disaster alerts, but restricts write access.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user, authenticated or not, can read disaster alerts.
     * @deny (create, update, delete) - No user can create, update, or delete disaster alerts.
     * @principle Allows public read access while restricting write access to prevent unauthorized modifications.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}