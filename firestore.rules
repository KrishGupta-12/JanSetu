/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It strictly enforces user-level and role-based authorization, while remaining flexible on data shapes to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.  Only the user themselves can modify their profile.
 * - /issueReports/{reportId}: Stores citizen-submitted issue reports. Publicly readable, but write-protected to owners.
 * - /admins/{email}: Stores admin credentials, keyed by email.  Write access is denied in these rules to avoid credential exploits.
 * - /alerts/{alertId}: Stores platform alerts. Publicly readable, only admins with "super_admin" role can create, update or delete alerts.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Publicly readable, only "super_admin" can create, update or delete leaderboard.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - Read-only collections (admins, leaderboard) are made publicly readable.
 * - Unrestricted access is explicitly denied.
 *
 * Denormalization for Authorization:
 *  - Issue Reports:  The `IssueReport` includes a `citizenId` field to quickly verify ownership for updates and deletes.
 *
 * Structural Segregation:
 * -  The data model does not make use of any private vs public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Only allow signed-in users to read their own profile. Only the user can create/update/delete their profile.
     * @path /users/{userId}
     * @allow (get, list) User with UID 'userId' can read the profile.
     * @allow (create) User with UID 'userId' can create their own profile, ensuring the 'uid' field matches.
     * @allow (update) User with UID 'userId' can update their own profile.
     * @allow (delete) User with UID 'userId' can delete their own profile.
     * @deny (get, list) User with UID 'otherUserId' cannot read/list the profile of 'userId'.
     * @deny (create) User with UID 'otherUserId' cannot create a profile for 'userId'.
     * @deny (update) User with UID 'otherUserId' cannot update the profile of 'userId'.
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile of 'userId'.
     * @principle Enforces user ownership for profile data, preventing unauthorized access or modification.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allow anyone to read issue reports, but only the submitter can modify or delete them.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read any issue report.
     * @allow (create) Any signed-in user can create a report, with the 'citizenId' matching their UID.
     * @allow (update) Only the citizen who created the report ('citizenId' in the document) can update it.
     * @allow (delete) Only the citizen who created the report can delete it.
     * @deny (create) Creating a report with a 'citizenId' that does not match the authenticated user's UID.
     * @deny (update) Updating a report by someone other than the original submitter.
     * @deny (delete) Deleting a report by someone other than the original submitter.
     * @principle Allows public read access to issue reports while restricting modification/deletion to the original submitter.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && resource != null && isOwner(resource.data.citizenId);
    }

    /**
     * @description Admins collection rules - prevents any client-side creation, modification, or deletion.  These credentials should only be managed through the Firebase Admin SDK.
     * @path /admins/{email}
     * @allow (get, list) Any user can read list of admins.
     * @deny (create) No one can create admin credentials through client.
     * @deny (update) No one can update admin credentials through client.
     * @deny (delete) No one can delete admin credentials through client.
     * @principle Protects admin credentials from unauthorized access or modification.
     */
    match /admins/{email} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow admins with "super_admin" role to create, update and delete alerts. Any user can read alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read list of alerts.
     * @allow (create) Only super admins can create alerts.
     * @allow (update) Only super admins can update alerts.
     * @allow (delete) Only super admins can delete alerts.
     * @deny (create) Non-super admins cannot create alerts.
     * @deny (update) Non-super admins cannot update alerts.
     * @deny (delete) Non-super admins cannot delete alerts.
     * @principle Protects alerts from unauthorized access or modification by requiring "super_admin" role.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin("super_admin");
      allow update: if isSignedIn() && isAdmin("super_admin") && resource != null;
      allow delete: if isSignedIn() && isAdmin("super_admin") && resource != null;
    }

    /**
     * @description Allow super admins to create, update and delete leaderboard. Any user can read leaderboard.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Any user can read list of leaderboard.
     * @allow (create) Only super admins can create leaderboard.
     * @allow (update) Only super admins can update leaderboard.
     * @allow (delete) Only super admins can delete leaderboard.
     * @deny (create) Non-super admins cannot create leaderboard.
     * @deny (update) Non-super admins cannot update leaderboard.
     * @deny (delete) Non-super admins cannot delete leaderboard.
     * @principle Protects leaderboard from unauthorized access or modification by requiring "super_admin" role.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin("super_admin");
      allow update: if isSignedIn() && isAdmin("super_admin") && resource != null;
      allow delete: if isSignedIn() && isAdmin("super_admin") && resource != null;
    }

    //---------- Helper functions ----------
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin(role) {
       return get(/databases/$(database)/documents/admins/$(request.auth.token.email)).data.role == role;
    }
  }
}