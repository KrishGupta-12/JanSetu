/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-owned data and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the user themselves.
 * - /issueReports/{reportId}: Stores issue reports. Public read, owner-only writes, admin updatable.
 * - /superAdmins/{userId}: Indicates super admin status. Only super admins can manage this collection.
 * - /alerts/{alertId}: Stores platform alerts. Public read, only super admins can create/update/delete.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Public read, only super admins can update.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Issue reports are publicly readable but can only be created by authenticated users, updated by super admins or the report creator, and deleted by super admins.
 * - Only super admins can manage super admin status.
 * - Platform alerts are publicly readable but can only be created/updated/deleted by super admins.
 * - Leaderboard data is publicly readable but can only be updated by super admins.
 * - No user listing is allowed for the `/users` collection to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     * @deny (create) if the user ID in the request does not match the authenticated user ID.
     * @deny (update) if the user attempts to change their user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration

      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Only the user can update their profile, and the uid cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the user is signed in and the citizenId matches their auth.uid.
     * @allow (update, delete) if the user is a super admin or the owner of the report.
     * @principle Allows public read access but restricts writes to the owner or super admins.
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;

      // Allow a user to create a report if they are signed in and the citizenId matches their auth.uid.
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;

      // Only the report creator or a super admin can update/delete the report.
      allow update: if isSuperAdmin() || (isSignedIn() && resource.data.citizenId == request.auth.uid);
      allow delete: if isSuperAdmin() || (isSignedIn() && resource.data.citizenId == request.auth.uid);
    }

    /**
     * @description Controls access to super admin list.
     * @path /superAdmins/{userId}
     * @allow (get, list) if the user is a super admin.
     * @allow (create, update, delete) if the user is a super admin.
     * @principle Only super admins can manage super admin status.
     */
    match /superAdmins/{userId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) if true (public read).
     * @allow (create, update, delete) if the user is a super admin.
     * @principle Allows public read access but restricts writes to super admins.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) if true (public read).
     * @allow (create) if false.
     * @allow (update) if the user is a super admin.
     * @allow (delete) if false.
     * @principle Allows public read access but restricts writes to super admins.
     */
    match /leaderboard/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if isSuperAdmin();
      allow delete: if false;
    }

    // ---------- Helper Functions ----------

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is a super admin by checking for the existence of a document in the /superAdmins collection with the user's UID as the document ID.
     * @return True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }
  }
}