/**
 * @fileOverview Firestore Security Rules for the Citizen Problem Reporting Platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to issue reports and alerts, but restricts write
 * access to authorized users based on role. Admin credentials are email-based.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only by authorized users.
 * - /admins/{email}: Stores admin credentials, not directly accessible via Firestore (used only for auth checks).
 * - /alerts/{alertId}: Stores platform alerts, publicly readable but writable only by authorized admins.
 *
 * Key Security Decisions:
 * - Users cannot list all user profiles.
 * - Admin credentials are NOT directly exposed to the client, only used for authentication.
 * - Public read access is granted to issue reports and alerts for general visibility.
 *
 * Denormalization for Authorization:
 * - Issue reports denormalize the `citizenId` to simplify ownership checks.
 * - Alerts denormalize `adminId` and `adminName` to track the author.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users collection to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access and modify their own profile.
     * @deny (list) Users cannot list all user profiles.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get, list) All users can read issue reports.
     * @deny (create, update, delete) Only authenticated, authorized users can write.
     * @principle Public read access with restricted write access based on role.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn(); // Allow any authenticated user to create
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to admin credentials.
     * @path /databases/{database}/documents/admins/{email}
     * @deny (get, list, create, update, delete) No direct access to admin credentials via Firestore.
     * @principle Admin credentials are only used for backend authorization, not directly exposed.
     */
    match /admins/{email} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Controls access to platform alerts.
     * @path /databases/{database}/documents/alerts/{alertId}
     * @allow (get, list) All users can read platform alerts.
     * @deny (create, update, delete) Only authenticated admins can write alerts.
     * @principle Public read access with restricted write access for admins.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn(); // Allow any authenticated user to create
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}