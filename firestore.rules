/**
 * @fileoverview Firestore Security Rules for the civic issue reporting application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users can be citizens or have administrative roles (super_admin, waste_admin, pothole_admin, streetlight_admin, water_admin).
 * Citizens can create and read issue reports, while admins have varying levels of access to manage these reports and other platform data. Super admins have full control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. The {userId} MUST match the user's Firebase Auth UID.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.
 * - /superAdmins/{userId}: Presence of document indicates super admin status; document ID is the user's UID.
 * - /alerts/{alertId}: Stores platform-wide alerts created by admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, expected to contain only one document.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Issue reports are publicly readable but can only be created by authenticated users. Modification and deletion of reports are restricted to admins and the report owner.
 * - The leaderboard is publicly readable but only updatable by a privileged process (e.g., a Cloud Function triggered by data changes).
 * - Super admin status is determined by the presence of a document in the `/superAdmins` collection, keyed by the user's UID.
 * - Role-based access control is implemented using the `getUserRole()` helper function, which reads the user's profile document.
 * - List operations are generally restricted to owners or admins for private data. Public collections may be listable to all.
 *
 * Denormalization for Authorization:
 * - The `IssueReport` entity denormalizes `citizenId`, allowing rules to quickly check report ownership without additional reads.
 * - Admin names and IDs are denormalized onto the `Alert` entity, allowing alert creation to be validated without extra reads.
 *
 * Structural Segregation:
 * - No explicit segregation between private and public data is needed, as permissions are managed via role-based access control and ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is a super admin based on the presence of a document in the `/superAdmins` collection.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Checks for super admin role.
     */
    function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    /**
     * @description Retrieves the user's role from their user profile document.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Determines user role for access control.
     */
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Combines ownership and existence checks for destructive operations.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants read access to the document only if the user is the owner.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     */
    function canReadUserDocument(userId) {
      return isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants write access to the document only if the user is the owner.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     */
    function canWriteUserDocument(userId) {
      return isSignedIn() && isOwner(userId);
    }

    /**
     * @description
     * Rules for user profiles. Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list) User with UID 'user123' can read their own profile.
     * @allow (create, update) User with UID 'user123' can create or update their own profile.
     * @deny (get, list) User with UID 'user456' cannot read user 'user123' profile.
     * @deny (create, update) User with UID 'user456' cannot create or update user 'user123' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if canReadUserDocument(userId);
      allow list: if false;
      allow create: if canWriteUserDocument(userId) && request.resource.data.uid == userId;
      allow update: if canWriteUserDocument(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description
     * Rules for issue reports. Allows anyone to read issue reports, but only authenticated users can create them.
     * Admins can update and delete reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read or list all issue reports.
     * @allow (create) User with UID 'user123' can create a new issue report.
     * @deny (update, delete) User with UID 'user123' cannot update or delete an issue report they don't own unless they're an admin.
     * @principle Allows public read access but restricts write access to owners and admins.
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if (isExistingOwner(resource.data.citizenId) || isSuperAdmin() || (isSignedIn() && (getUserRole() == 'waste_admin' || getUserRole() == 'pothole_admin' || getUserRole() == 'streetlight_admin' || getUserRole() == 'water_admin')));
      allow delete: if (isExistingOwner(resource.data.citizenId) || isSuperAdmin() || (isSignedIn() && (getUserRole() == 'waste_admin' || getUserRole() == 'pothole_admin' || getUserRole() == 'streetlight_admin' || getUserRole() == 'water_admin')));
    }

    /**
     * @description
     * Rules for super admin documents. Only super admins can create, update, or delete these documents.
     * This effectively manages who has super admin privileges.
     * @path /superAdmins/{userId}
     * @allow (get) User with UID 'superadmin123' can read their own super admin document.
     * @allow (create) User with UID 'superadmin123' can create their own super admin document.
     * @deny (update, delete) Only the super admin themselves can modify their own super admin document.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
        allow get: if isSuperAdmin();
        allow list: if false;
        allow create: if isSuperAdmin();
        allow update: if false;
        allow delete: if isSuperAdmin();
    }

    /**
     * @description
     * Rules for platform alerts. Only admins can create alerts. Anyone can read existing alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read or list all platform alerts.
     * @allow (create) User with UID 'admin123' can create a new platform alert if they are an admin.
     * @deny (update, delete) Non-admin users cannot update or delete platform alerts.
     * @principle Restricts alert creation to admins while allowing public read access.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isSuperAdmin() || getUserRole() == 'waste_admin' || getUserRole() == 'pothole_admin' || getUserRole() == 'streetlight_admin' || getUserRole() == 'water_admin');
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     * Rules for the leaderboard. Allows anyone to read the leaderboard, but only a super admin can update it.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Any user can read the leaderboard.
     * @allow (update) Only a super admin can update the leaderboard.
     * @deny (create, delete) The leaderboard document should not be created or deleted through client-side rules.
     * @principle Restricts leaderboard updates to super admins while allowing public read access.
     */
    match /leaderboard/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if isSuperAdmin();
      allow delete: if false;
    }
  }
}