/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles,
 * public read with owner-only writes for issue reports and alerts,
 * and email-based access control for administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /issueReports/{reportId}: Stores citizen-submitted issue reports.
 * - /admins/{email}: Stores administrator credentials, keyed by email.
 * - /alerts/{alertId}: Stores platform-wide alerts.
 *
 * Key Security Decisions:
 * - Users can only list their own profile (to check if one exists).
 * - Issue reports are publicly readable but can only be created, updated, or deleted by the report's author.
 * - Administrator credentials are not accessible through the client; they are only used for backend logic.
 * - Platform alerts are publicly readable but can only be created, updated, or deleted by authorized administrators.
 *
 * Denormalization for Authorization:
 * - Issue reports denormalize the `citizenId` to enable owner-only writes.
 * - Alerts denormalize the `adminId` to enable owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, enforcing ownership.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, list, update, delete) Authenticated user can only read/modify their own profile.
     * @deny (create) If the user attempts to create a profile with a different UID.
     * @deny (update, delete) If the user attempts to update or delete a profile they don't own.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages issue reports, allowing public read and owner-only writes.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read the issue reports.
     * @allow (create) Authenticated user can create a report if they are the citizen.
     * @allow (update, delete) Only the citizen who created the report can modify or delete it.
     * @deny (create) If the citizenId does not match the authenticated user's UID.
     * @deny (update, delete) If a user tries to modify or delete a report they didn't create.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Manages administrator credentials (email-based access).
     * @path /admins/{email}
     * @deny (get, list, create, update, delete) No client access allowed. Admin credentials should only be managed server-side.
     * @principle Restricts all client access to admin credentials for security.
     */
    match /admins/{email} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Manages platform alerts, allowing public read and admin-only writes.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read platform alerts.
     * @allow (create) Authenticated user can create if they are the alert author.
     * @allow (update, delete) Only the admin who created the alert can modify or delete it.
     * @deny (create) If the adminId does not match the authenticated user's UID.
     * @deny (update, delete) If a user tries to modify or delete an alert they didn't create.
     * @principle Allows public read access while restricting write access to the alert's author.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(adminId) {
        return request.auth.uid == adminId;
      }

      function isExistingOwner(adminId) {
        return isOwner(adminId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.adminId);
      allow delete: if isExistingOwner(resource.data.adminId);
    }
  }
}