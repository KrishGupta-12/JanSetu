/**
 * @description This ruleset enforces a user-ownership model for user profiles, allows public read access to issue reports with owner-only writes,
 *              and restricts admin credential access to super admins only. Data shape validation is relaxed for rapid prototyping.
 * @dataStructure
 *  - /users/{userId}: Stores public user profiles, accessible only by the user themselves.
 *  - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only by the report creator.
 *  - /admins/{email}: Stores admin credentials, accessible only to super admins.
 * @keySecurityDecisions
 *  - User listing is disallowed for privacy.
 *  - Ambiguous relationships default to strict owner-only access.
 *  - The `admins` collection is secured with a role-based access control, where only super admins can read or write.
 *  - User profile creation is allowed only if the authenticated user's ID matches the document ID.
 * @denormalizationForAuthorization To simplify rules and avoid costly `get()` calls:
 *  - Issue reports must contain a `citizenId` field to enforce ownership.
 *  - No denormalization is required for user profiles as the `userId` is directly available in the path.
 * @structuralSegregation Public data (issue reports) is stored in a top-level collection for easy public access, while private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring users can only access their own profile data.
     * @path /users/{userId}
     * @allow (create) User 'mY7ecCN488RcIxpjSlhQkGVqvY22' can create their profile at /users/mY7ecCN488RcIxpjSlhQkGVqvY22.
     * @allow (get, update, delete) User 'mY7ecCN488RcIxpjSlhQkGVqvY22' can get, update, and delete their profile at /users/mY7ecCN488RcIxpjSlhQkGVqvY22.
     * @deny (create) User 'otherUserId' cannot create a profile at /users/mY7ecCN488RcIxpjSlhQkGVqvY22.
     * @deny (get, update, delete) User 'otherUserId' cannot get, update, and delete the profile at /users/mY7ecCN488RcIxpjSlhQkGVqvY22.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages issue reports, allowing public read access but restricting writes to the report creator.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read any issue report.
     * @allow (create) User 'user123' can create an issue report with citizenId: 'user123'.
     * @allow (update, delete) User 'user123' can update/delete an issue report they created with citizenId: 'user123', after it exists.
     * @deny (create) User 'user456' cannot create an issue report with citizenId: 'user123'.
     * @deny (update, delete) User 'user456' cannot update/delete an issue report created by 'user123'.
     * @principle Allows public read access with owner-only writes, enforcing ownership via the `citizenId` field.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.citizenId == request.auth.uid;
      allow update: if request.auth != null && isExistingOwner(resource.data.citizenId);
      allow delete: if request.auth != null && isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Restricts access to admin credentials, allowing only super admins to manage them.
     * @path /admins/{email}
     * @allow (get, list, create, update, delete) Only a super admin can get, list, create, update, or delete admin credentials.
     * @deny (get, list, create, update, delete) A regular user cannot get, list, create, update, or delete admin credentials.
     * @principle Implements role-based access control, restricting access to sensitive data.
     */
    match /admins/{email} {
      allow get, list, create, update, delete: if false; // TODO: Add admin role check.
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
      return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
  }
}