/**
 * @fileoverview Firestore Security Rules for the civic-connect application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model where users can read their own profile data,
 * citizens can create issue reports, and administrators with specific roles can manage data related to their departments.
 * Super admins have broad access to manage platform-wide settings.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.  Every user can read their own profile, but listing all users is forbidden.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.  Anyone can read. Only authorized users can create.
 * - /admins/{email}: Stores admin credentials. This collection is not directly exposed to the client; access is managed via backend functions.
 * - /alerts/{alertId}: Stores platform alerts. Anyone can read.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Write access to `/users/{userId}` is restricted to the authenticated user matching the `userId` and creating their own profile.
 * - The `/admins` collection is intended to be managed server-side, not directly by client-side rules.
 * - All write requests require user authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the authenticated user's UID matches the requested userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the authenticated user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description User profile access rules.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile, with matching uid.
     * @allow (update) Authenticated user can update their own profile, with matching uid.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Creating a user profile with a mismatched uid is not allowed.
     * @deny (update) Updating another user's profile is not allowed.
     * @deny (delete) Deleting user profiles is not allowed through rules.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Issue report access rules.
     * @path /issueReports/{reportId}
     * @allow (get) Anyone can read an issue report.
     * @allow (list) Anyone can list issue reports.
     * @deny (create) Only authenticated users can create an issue report.
     * @deny (update) Updating an issue report is not allowed through rules.
     * @deny (delete) Deleting an issue report is not allowed through rules.
     * @principle Allows public read access, restricts write access to authenticated users.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Platform alert access rules.
     * @path /alerts/{alertId}
     * @allow (get) Anyone can read platform alerts.
     * @allow (list) Anyone can list platform alerts.
     * @deny (create) Creating alerts is not allowed through rules.
     * @deny (update) Updating alerts is not allowed through rules.
     * @deny (delete) Deleting alerts is not allowed through rules.
     * @principle Allows public read access.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Admin credential access rules.  This collection should be managed server-side.
     * @path /admins/{email}
     * @deny (get) Getting is not allowed.
     * @deny (list) Listing is not allowed.
     * @deny (create) Creating admins is not allowed through rules.
     * @deny (update) Updating admins is not allowed through rules.
     * @deny (delete) Deleting admins is not allowed through rules.
     * @principle Enforces server-side management of admin credentials.
     */
    match /admins/{email} {
      allow get, list, create, update, delete: if false;
    }
  }
}