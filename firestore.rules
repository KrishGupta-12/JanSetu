/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Access is restricted to the owner (the user themselves) for writes, but is public read.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens. Public read, owner-only write (citizenId field is used to validate ownership).
 * - /superAdmins/{userId}: Indicates super admin status. Only super admins can create or delete these documents.
 * - /alerts/{alertId}: Stores platform-wide alerts. Public read, only super admins can write.
 * - /leaderboard/{leaderboardId}: Stores pre-calculated leaderboard data. Public read-only. Writes are denied.
 *
 * Key Security Decisions:
 * - User listing is disallowed (client cannot list all users).
 * - Leaderboard data is read-only.
 * - Super admin status is managed through the /superAdmins collection. The existence of a document with the user's ID in this collection grants super admin privileges.
 *
 * Denormalization for Authorization:
 * - The `citizenId` field on `issueReports` is used for write authorization, enabling simple `isOwner()` checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get): Any authenticated user can read any user profile.
     * @allow (create, update, delete): Only the user themselves can modify their own profile, and creation requires the UID in the document to match the path.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallow listing
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list): Any authenticated user can read any issue report.
     * @allow (create): Any authenticated user can create an issue report, provided the `citizenId` matches their UID.
     * @allow (update, delete): Only the user who created the report (`citizenId` field) can modify or delete it.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && isOwner(resource.data.citizenId);
    }

    /**
     * @description Controls access to super admin status.
     * @path /superAdmins/{userId}
     * @allow (get): Any authenticated user can check if a user is a super admin.
     * @allow (create, delete): Only a super admin can grant or revoke super admin status.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get: if isSignedIn();
      allow create: if isSuperAdmin();
      allow update: if false;
      allow delete: if isSuperAdmin();
      allow list: if false;
    }

    /**
     * @description Controls access to platform-wide alerts.
     * @path /alerts/{alertId}
     * @allow (get, list): Any authenticated user can read alerts.
     * @allow (create): Only super admins can publish alerts.
     * @allow (update, delete): Only super admins can modify or delete alerts.
     * @principle Restricts alert management to super admins and allows public reads.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list): Any authenticated user can read the leaderboard.
     * @principle Leaderboard data is publicly readable and cannot be modified through client requests.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has super admin privileges.
     * @return {boolean} True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }
  }
}