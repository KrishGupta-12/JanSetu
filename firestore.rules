/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows super admins to read all user profiles, and provides public
 *              read access to issue reports while restricting writes to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /issueReports/{reportId}: Stores issue reports.
 * - /superAdmins/{userId}: Documents indicating super admin status.
 * - /alerts/{alertId}: Stores platform alerts.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Super admins can list and get all user profiles.
 * - Issue reports are publicly readable but only writable by authenticated users.
 * - Listing all users is generally disallowed, except for super admins.
 * - Leaderboard data is publicly readable.
 *
 * Denormalization for Authorization:
 * - Super admin status is checked via a `get()` call on the /superAdmins collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Users can only access their own profile, except for super admins who can access all profiles.
     * @path /users/{userId}
     * @allow (get, list) if isSuperAdmin() || isOwner(userId);
     * @allow (create, update, delete) if isOwner(userId);
     * @deny (create) if !isNewUser();
     * @deny (create) if request.resource.data.uid != request.auth.uid;
     * @deny (update) if request.resource.data.uid != resource.data.uid;
     * @deny (delete) if !isExistingOwner(userId);
     * @principle Enforces user-ownership and restricts access to user's own data, while enabling super admin access.
     */
    match /users/{userId} {
      // Function to check if the authenticated user is creating a new account
      function isNewUser() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data == null;
      }

      allow get, list: if isSuperAdmin() || isOwner(userId);
      allow create: if isOwner(userId) && isNewUser() && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages issue reports. Issue reports are publicly readable, but creation is restricted to authenticated users.
     * @path /issueReports/{reportId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @deny update, delete: if false; // TODO: Add owner/admin validation once the schema is updated with an ownership field.
     * @principle Publicly readable, owner-only writes, authenticated access only.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner/admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages the superAdmins collection. Only the server should manage this collection.
     * @path /superAdmins/{userId}
     * @allow get, list, create, update, delete: if false;
     * @principle Only server can manage super admins.
     */
    match /superAdmins/{userId} {
      allow get, list, create, update, delete: if false;
    }

     /**
      * @description Manages platform alerts. Alerts are publicly readable, but creation is restricted to authenticated admins.
      * @path /alerts/{alertId}
      * @allow get, list: if true;
      * @allow create: if isSuperAdmin();
      * @deny update, delete: if false; // TODO: Add owner/admin validation once the schema is updated with an ownership field.
      * @principle Publicly readable, admin-only writes.
      */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update, delete: if false; // TODO: Add owner/admin validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages leaderboard data. Leaderboard data is publicly readable.
     * @path /leaderboard/{leaderboardId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Publicly readable.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document and the document exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Checks if the user is a super admin by querying the /superAdmins collection.
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }
  }
}