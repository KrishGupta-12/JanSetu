/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with ownership checks for user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves or super admins.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only with a valid user ID.
 * - /admins/{email}: Stores admin credentials. Only accessible to super admins.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable, and writable only by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable but writable only by super admins.
 *
 * Key Security Decisions:
 * - User profiles are strictly controlled, preventing unauthorized access or modification.
 * - Issue reports are publicly readable, promoting transparency, but require a valid user ID for creation.
 * - Admin credentials and alerts are restricted to super admins, ensuring privileged operations are secured.
 * - Leaderboard data is publicly readable but updatable only by super admins.
 * - Denormalization: The `citizenId` field on `IssueReport` and the `uid` field on `UserProfile` are used for ownership checks, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list): Any user can read any profile.
     * @allow (create): A user can create their own profile if the UID matches.
     * @allow (update, delete): A user can update/delete their own profile if the UID matches.
     * @deny (create, update, delete): If the UID does not match, the operation is denied.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update, delete: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list): Anyone can read issue reports.
     * @allow (create): Any authenticated user can create an issue report if `citizenId` matches their UID.
     * @allow (update, delete): Only the owner can update/delete an issue report.
     * @deny (create, update, delete): If the UID does not match, the operation is denied.
     * @principle Allows public reads with owner-only writes, and enforces document ownership for writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

       function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }


      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.citizenId);
    }

      /**
     * @description Controls access to administrator credentials.
     * @path /admins/{email}
     * @allow (get, list, create, update, delete): No one is allowed.
     * @principle Prevents any access to admin credentials during prototyping.
     */
    match /admins/{email} {
       allow get, list, create, update, delete: if false;
    }


    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list): Any user can read alerts.
     * @allow (create, update, delete): No one is allowed.
     * @principle Allows public reads, but restricts writes during prototyping.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list): Any user can read the leaderboard.
     * @allow (create, update, delete): No one is allowed.
     * @principle Allows public reads, but restricts writes during prototyping.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}