rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile (userId matches auth.uid).
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //function to check if the user exists and is the owner
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data.uid == request.auth.uid;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disabled.

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue report documents.
     * @path /issueReports/{reportId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Writable only by the owner (citizenId matches auth.uid).
     * @principle Allows public reading of reports, enforces ownership for modifications.
     */
    match /issueReports/{reportId} {
      //function to check if the user is the owner
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      //function to check if the user exists and is the owner
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.citizenId;
      }
      
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Grants super admin privileges based on document existence in this collection.
     * @path /superAdmins/{userId}
     * @allow (get, create, update, delete) Only super admins can manage the super admin list.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
      //function to check if the user is a super admin
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isSuperAdmin();
      allow list: if false; // Super admin list should not be generally listable.
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Controls access to platform alert documents.
     * @path /alerts/{alertId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only super admins can manage alerts.
     * @principle Allows public reading of alerts, restricts creation/modification to super admins.
     */
    match /alerts/{alertId} {
      //function to check if the user is a super admin
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      //function to check if the user exists and is a super admin
      function isExistingSuperAdmin() {
        return isSignedIn() && isSuperAdmin() && resource.data.adminId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;

      allow create: if isSignedIn() && isSuperAdmin() && request.resource.data.adminId == request.auth.uid;
      allow update: if isExistingSuperAdmin();
      allow delete: if isExistingSuperAdmin();
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Publicly readable.
     * @allow (create, update, delete) Only super admins can manage the leaderboard.
     * @principle Allows public reading of the leaderboard, restricts modification to super admins.
     */
    match /leaderboard/{leaderboardId} {
      //function to check if the user is a super admin
      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      //function to check if the user exists and is a super admin
      function isExistingSuperAdmin() {
        return isSignedIn() && isSuperAdmin();
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;

      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }
  }
}