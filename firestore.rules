/**
 * @description This ruleset enforces a role-based access control model with a focus on data ownership and administrative privileges.
 * All authorization decisions are based on the authenticated user's UID and their assigned role, with super admins having elevated permissions.
 * @dataStructure
 * - /users/{userId}: Stores public profiles for all users, accessible with owner-only or superadmin permissions.
 * - /issueReports/{reportId}: Stores all issue reports, publicly readable but writable only with owner-only or superadmin permissions.
 * - /superAdmins/{userId}: Presence of a document grants super admin role. Only super admins can manage this collection.
 * - /alerts/{alertId}: Stores platform-wide alerts, publicly readable but writable only by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable but writable only by super admins.
 * @keySecurityDecisions
 * - Super admins have full read and write access to all collections, bypassing standard ownership checks.
 * - User listing is generally disallowed except for super admins, to protect user privacy.
 * - Super admin status is determined by the presence of a document in the `/superAdmins/{userId}` collection.
 * @denormalizationForAuthorization
 * - The `IssueReport` entity includes `citizenId` to enable owner-based security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles based on ownership and super admin status.
     * @path /users/{userId}
     * @allow (read) User with UID 'userId' can read their profile. Super admins can read any profile.
     * @allow (create) User with UID 'userId' can create their profile.
     * @allow (update) User with UID 'userId' can update their profile. Super admins can update any profile.
     * @allow (delete) User with UID 'userId' can delete their profile. Super admins can delete any profile.
     * @deny (read) User with UID 'otherUserId' cannot read the profile of 'userId' (unless super admin).
     * @deny (update) User with UID 'otherUserId' cannot update the profile of 'userId' (unless super admin).
     * @deny (delete) User with UID 'otherUserId' cannot delete the profile of 'userId' (unless super admin).
     * @principle Enforces document ownership for writes and allows super admin overrides.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow list: if isSuperAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
    }

    /**
     * @description Allows public reading of issue reports but restricts creation, updating, and deletion to owners and super admins.
     * @path /issueReports/{reportId}
     * @allow (read) Any user can read any issue report.
     * @allow (create) User with UID matching report.citizenId can create an issue report. Super admins can create any issue report.
     * @allow (update) User with UID matching report.citizenId can update an issue report. Super admins can update any issue report.
     * @allow (delete) User with UID matching report.citizenId can delete an issue report. Super admins can delete any issue report.
     * @deny (create) User with UID 'otherUserId' cannot create an issue report with citizenId 'userId' (unless super admin).
     * @deny (update) User with UID 'otherUserId' cannot update an issue report with citizenId 'userId' (unless super admin).
     * @deny (delete) User with UID 'otherUserId' cannot delete an issue report with citizenId 'userId' (unless super admin).
     * @principle Allows public read access while enforcing owner-only writes and super admin overrides.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && (request.resource.data.citizenId == request.auth.uid || isSuperAdmin());
      allow update: if isSignedIn() && ((request.resource.data.citizenId == resource.data.citizenId && resource.data.citizenId == request.auth.uid) || isSuperAdmin());
      allow delete: if isSignedIn() && ((resource.data.citizenId == request.auth.uid) || isSuperAdmin());
    }

    /**
     * @description Restricts management of super admin roles to existing super admins.
     * @path /superAdmins/{userId}
     * @allow (read) Any super admin can read the super admin list.
     * @allow (create) Only existing super admins can create new super admin roles.
     * @allow (update) Only existing super admins can update super admin roles.
     * @allow (delete) Only existing super admins can delete super admin roles.
     * @deny (read) Non-super admins cannot read the super admin list.
     * @deny (create) Non-super admins cannot create new super admin roles.
     * @deny (update) Non-super admins cannot update super admin roles.
     * @deny (delete) Non-super admins cannot delete super admin roles.
     * @principle Enforces strict control over super admin role management.
     */
    match /superAdmins/{userId} {
      allow get: if isSignedIn() && isSuperAdmin();
      allow list: if isSignedIn() && isSuperAdmin();
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Allows public reading of alerts, but restricts creation, updating, and deletion to super admins.
     * @path /alerts/{alertId}
     * @allow (read) Any user can read any alert.
     * @allow (create) Only super admins can create alerts.
     * @allow (update) Only super admins can update alerts.
     * @allow (delete) Only super admins can delete alerts.
     * @deny (create) Non-super admins cannot create alerts.
     * @deny (update) Non-super admins cannot update alerts.
     * @deny (delete) Non-super admins cannot delete alerts.
     * @principle Allows public read access while restricting writes to super admins.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Allows public reading of the leaderboard, but restricts creation, updating, and deletion to super admins.
     * @path /leaderboard/{leaderboardId}
     * @allow (read) Any user can read the leaderboard.
     * @allow (create) Only super admins can create leaderboard data.
     * @allow (update) Only super admins can update leaderboard data.
     * @allow (delete) Only super admins can delete leaderboard data.
     * @deny (create) Non-super admins cannot create leaderboard data.
     * @deny (update) Non-super admins cannot update leaderboard data.
     * @deny (delete) Non-super admins cannot delete leaderboard data.
     * @principle Allows public read access while restricting writes to super admins.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if isSignedIn() && isSuperAdmin();
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is a super admin.
  function isSuperAdmin() {
    return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
  }
}