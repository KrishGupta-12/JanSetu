/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Accessible only to the owner.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens. Publicly readable, but only owners can modify or delete.
 * - /superAdmins/{userId}:  Indicates super admin status. Only super admins can create/delete these documents.
 * - /alerts/{alertId}: Stores platform-wide alerts. Publicly readable, only super admins can create.
 * - /leaderboard/{leaderboardId}: Stores the pre-calculated leaderboard. Publicly readable, only super admins can modify.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Issue reports are publicly readable but only the submitter can modify or delete.
 * - Only super admins can manage super admin status.
 * - Only super admins can create/update alerts.
 * - Leaderboard data is publicly readable but only super admins can modify.
 * - Listing of user profiles is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile based on ownership.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to issue reports, but restricts modifications to the owner.
     * @path /issueReports/{reportId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the citizenId matches the user's UID.
     * @allow (update, delete) if the user is the owner of the report.
     * @deny (create) if the user is not the owner of the report.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.citizenId == resource.data.citizenId;
      allow delete: if isSignedIn() && resource.data.citizenId == request.auth.uid;
    }

    /**
     * @description Manages super admin privileges. Only super admins can create or delete these documents.
     * @path /superAdmins/{userId}
     */
    match /superAdmins/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isSuperAdmin() {
            return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }

        allow get: if isSuperAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isSuperAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Manages platform alerts. Only super admins can create alerts.
     * @path /alerts/{alertId}
     */
    match /alerts/{alertId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isSuperAdmin() {
            return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isSuperAdmin();
        allow update: if false;
        allow delete: if false;
    }

      /**
       * @description Manages the leaderboard data. Only super admins can update the leaderboard.
       * @path /leaderboard/{leaderboardId}
       */
    match /leaderboard/{leaderboardId} {
      function isSignedIn() {
          return request.auth != null;
      }

      function isSuperAdmin() {
          return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isSuperAdmin();
      allow delete: if false;
    }
  }
}