/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for public content with strict ownership and role-based access controls for user data and administrative functions.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles. Access is restricted to the user themselves.
 * - `/issueReports/{reportId}`: Stores issue reports. Read access is public, but writes are restricted to the report creator and authorized admins.
 * - `/admins/{email}`: Stores admin credentials. This collection is intended for backend use only and is not directly accessible to clients.
 * - `/alerts/{alertId}`: Stores platform alerts. Read access is public; write access is restricted to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Admin credentials are not directly accessible from the client.
 * - Write access to issue reports is restricted to the creating user and authorized admins.
 *
 * Denormalization for Authorization:
 * - Issue reports denormalize the `citizenId` to enable ownership-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile document with document ID 'user123'.
     * @deny (create) User with UID 'user123' tries to create a profile document with document ID 'user456'.
     * @allow (get, update, delete) User with UID 'user123' reads/updates/deletes their own profile document 'user123'.
     * @deny (get, update, delete) User with UID 'user123' tries to read/update/delete profile document 'user456'.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure issue reports. Publicly readable, but only the author or an admin can modify them.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read issue reports.
     * @allow (create) User creates a report with their own UID in the 'citizenId' field.
     * @deny (create) User creates a report with a mismatched 'citizenId' field.
     * @allow (update, delete) User updates/deletes their own report (identified by 'citizenId' field).
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }
      function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

     /**
      * @description Secure admin credentials. This collection is NOT directly client-accessible.
      * @path /admins/{email}
      * @deny (get, list, create, update, delete) No direct client access allowed.
      * @principle Restricts access to admin credentials for backend use only.
      */
    match /admins/{email} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Secure platform alerts. Publicly readable, but only admins can create them.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read platform alerts.
     * // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access while restricting write access to admins.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}