/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 * with different levels of access granted to citizens, admins, and super admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. User 'uid' must match the document ID.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.
 * - /admins/{email}: Stores admin credentials, keyed by email.
 * - /alerts/{alertId}: Stores platform alerts.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data (single document).
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Admin credentials can only be created and managed through backend admin SDK.
 * - Leaderboard data can be read by anyone, but only updated by backend admin SDK.
 *
 * Denormalization for Authorization:
 * - Issue Reports do not denormalize the user role of the citizen who created the report.
 *   Admin credentials are kept in a separate `/admins` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Users can read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access their profile.
     * @deny (create) User trying to create a profile with a different UID.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports. Any authenticated user can create a report.
     *              Reports can be read by anyone. Only the owner can update or delete their reports.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get, list) Any user can read the reports.
     * @allow (create) Any authenticated user can create a report.
     * @deny (update, delete) Only the owner can modify/delete the report.
     * @principle Public read, owner-only writes with ownership validation.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      function isExistingOwner(citizenId) {
        return isSignedIn() && isOwner(citizenId) && exists(resource);
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.citizenId);
    }

     /**
      * @description Manages admin credentials. Only accessible through backend admin SDK.
      * @path /databases/{database}/documents/admins/{email}
      * @allow (create, get, update, delete, list) Always deny. Admin management is done via the backend.
      * @principle  Admin credentials can only be created and managed through backend admin SDK.
      */
    match /admins/{email} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages platform alerts. Only admins can create alerts.
     *              All users can read alerts.
     * @path /databases/{database}/documents/alerts/{alertId}
     * @allow (get, list) Any user can read alerts.
     * @allow (create) Only admins can create alerts (Check admin role in backend).
     * @deny (update, delete) No one can update/delete alerts through the client.
     * @principle Public read, admin-only writes with role validation (in backend).
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Implement admin role check in backend
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard data. Read is public, write is restricted to backend.
     * @path /databases/{database}/documents/leaderboard/{leaderboardId}
     * @allow (get, list) Any user can read the leaderboard.
     * @deny (create, update, delete) Only the backend can modify the leaderboard.
     * @principle Public read, backend-only writes.
     */
    match /leaderboard/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // Only the backend can create/update the leaderboard
      allow update: if false;
      allow delete: if false;
    }
  }
}