rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages citizen profile data, ensuring only the user can read/write their own data.
     * @path /citizens/{citizenId}
     * @allow (create) User with UID 'user123' can create a citizen document if citizenId matches their UID.
     * @allow (get) User with UID 'user123' can read their own citizen document.
     * @deny (create) User with UID 'user456' cannot create a citizen document for citizenId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the citizen document for citizenId 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /citizens/{citizenId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return isSignedIn() && request.auth.uid == citizenId;
      }

      allow get: if isOwner(citizenId);
      allow list: if false;
      allow create: if isOwner(citizenId);
      allow update: if isOwner(citizenId);
      allow delete: if isOwner(citizenId);
    }

    /**
     * @description Manages admin user data, granting access based on admin status.
     * @path /admins/{adminId}
     * @allow (create) User with UID 'admin123' can create an admin document if adminId matches their UID (typically done by a super-admin).
     * @allow (get) User with UID 'admin123' can read their own admin document.
     * @deny (create) User with UID 'user123' cannot create an admin document for adminId 'admin123'.
     * @deny (update) User with UID 'user123' cannot update the admin document for adminId 'admin123'.
     * @principle Enforces role-based access control via document existence.
     */
    match /admins/{adminId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == adminId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages issue reports submitted by citizens, ensuring proper authorization.
     * @path /issue_reports/{issueReportId}
     * @allow (create) User with UID 'user123' can create an issue report with citizenId 'user123'.
     * @allow (get) Any signed-in user can read an issue report.
     * @deny (create) User with UID 'user456' cannot create an issue report with citizenId 'user123'.
     * @deny (update) User with UID 'user456' cannot update an issue report created by user 'user123'.
     * @principle Enforces citizen ownership for issue report creation and updates.
     */
    match /issue_reports/{issueReportId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isCitizen(citizenId) {
          return isSignedIn() && request.auth.uid == citizenId;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
        allow delete: if isCitizen(resource.data.citizenId);
    }

    /**
     * @description Manages issue reports specific to a given user.
     * @path /users/{userId}/issue_reports/{issueReportId}
     * @allow (create) User with UID 'user123' can create an issue report with citizenId 'user123'.
     * @allow (get) User with UID 'user123' can read their own issue report.
     * @deny (create) User with UID 'user456' cannot create an issue report for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the issue report for user 'user123'.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/issue_reports/{issueReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages air quality sensor data with public read access.
     * @path /air_quality_sensors/{sensorId}
     * @allow (get) Any user can read air quality sensor data.
     * @deny (create) No user can create air quality sensor data (only server).
     * @principle Allows public read access for sensor data.
     */
    match /air_quality_sensors/{sensorId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add server-only authentication if needed
      allow update: if false; // TODO: Add server-only authentication if needed
      allow delete: if false; // TODO: Add server-only authentication if needed
    }

    /**
     * @description Manages disaster alert information with public read access.
     * @path /disaster_alerts/{alertId}
     * @allow (get) Any user can read disaster alert information.
     * @deny (create) No user can create disaster alert information (only server).
     * @principle Allows public read access for disaster alerts.
     */
    match /disaster_alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add server-only authentication if needed
      allow update: if false; // TODO: Add server-only authentication if needed
      allow delete: if false; // TODO: Add server-only authentication if needed
    }
  }
}