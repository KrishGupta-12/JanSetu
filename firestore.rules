/**
 * @fileoverview Firestore Security Rules for JanSetu Prototype.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict access controls based on user roles and document ownership.
 * Data validation is relaxed to enable rapid prototyping, but key authorization fields are validated.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /issueReports/{reportId}: Issue reports, publicly readable but writable only with correct citizenId.
 * - /superAdmins/{userId}: Super admin list, existence confers super admin privileges.
 * - /alerts/{alertId}: Platform alerts, publicly readable but writable only by super admins.
 * - /leaderboard/{leaderboardId}: Leaderboard data, publicly readable, writable only by super admins, and intended to have a single document.
 *
 * Key Security Decisions:
 * - User listing is disabled for the /users collection.
 * - Public read access is granted to /issueReports, /alerts, and /leaderboard, but writes are secured using ownership or admin checks.
 * - Super admin status is determined by the existence of a document in /superAdmins/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and their UID matches the userId.
     * @deny (create) if the user is not signed in.
     * @deny (update, delete) if the document does not exist.
     * @deny (get, list) if the user is not signed in.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures issue reports. Publicly readable, but only the report's author can modify it.
     * @path /issueReports/{reportId}
     * @allow (get, list) Allow all users to read reports.
     * @allow (create) Allow only authenticated users to create reports and their citizenId must match their auth.uid.
     * @allow (update, delete) if the user is the owner of the report and the document exists.
     * @deny (update, delete) if the document does not exist.
     * @principle Allows public reads with owner-only writes, enforcing document ownership.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfReport(resource.data.citizenId);
      allow delete: if isSignedIn() && isExistingOwnerOfReport(resource.data.citizenId);
    }

    /**
     * @description Secures the super admins list. Only super admins can create, update, or delete entries.
     * @path /superAdmins/{userId}
     * @allow (get) Allow anyone to read if it exists.
     * @allow (create, update, delete) Allow only super admins to write.
     * @deny (create, update, delete) if the user is not a super admin.
     * @principle Restricts management of super admin roles to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Secures platform alerts. Publicly readable, but only super admins can create, update, or delete alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Allow all users to read alerts.
     * @allow (create, update, delete) Allow only super admins to write alerts.
     * @deny (create, update, delete) if the user is not a super admin.
     * @principle Allows public reads with super admin-only writes.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Secures the leaderboard data. Publicly readable, but only super admins can update it.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Allow all users to read the leaderboard.
     * @allow (create, update, delete) Allow only super admins to write.
     * @deny (create, update, delete) if the user is not a super admin.
     * @principle Allows public reads with super admin-only writes.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     * @param {string} userId The UID of the expected owner.
     * @return True if the user is signed in and their UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The UID of the expected owner.
     * @return True if the user is signed in, the document exists, and their UID matches the provided userId, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is the owner of the report and the document exists.
     * @param {string} citizenId The citizenId of the expected owner.
     * @return True if the user is signed in, the document exists, and their UID matches the provided citizenId, false otherwise.
     */
    function isExistingOwnerOfReport(citizenId) {
      return isSignedIn() && resource != null && request.auth.uid == citizenId;
    }

    /**
     * @description Checks if the user is a super admin by verifying the existence of a document in the /superAdmins collection.
     * @return True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }
  }
}