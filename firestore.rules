/**
 * @fileOverview Firestore Security Rules for the JanSetu application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and issue reports,
 * ensuring that only the authenticated user can create, read, update, or delete their own data.
 * Air quality sensors and disaster alerts are publicly readable.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}/userProfile/{userProfileId}`.
 * - Issue reports are stored under `/users/{userId}/issueReports/{issueReportId}`.
 * - Air quality sensor data is stored under `/airQualitySensors/{airQualitySensorId}`.
 * - Disaster alerts are stored under `/disasterAlerts/{disasterAlertId}`.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles and issue reports.
 * - Air quality sensor data and disaster alerts are publicly readable.
 * - Relational integrity is enforced between user IDs in the path and within the document data.
 *
 * Denormalization for Authorization:
 * The `userProfileId` in `/users/{userId}/userProfile/{userProfileId}` must match the `userId` path parameter for creates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles stored under /users/{userId}/userProfile/{userProfileId}.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - Authenticated user with UID 'user123' can create a profile at /users/user123/userProfile/user123. The request.resource.data.id must be equal to request.auth.uid.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can get, list, update or delete the profile at /users/user123/userProfile/user123.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile at /users/user123/userProfile/user123.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user456' cannot get, list, update, or delete the profile at /users/user123/userProfile/user123.
     * @principle Enforces document ownership and relational integrity.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for issue reports stored under /users/{userId}/issueReports/{issueReportId}.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - Authenticated user with UID 'user123' can create a report at /users/user123/issueReports/report456.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can get, list, update or delete the report at /users/user123/issueReports/report456.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a report at /users/user123/issueReports/report789.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user456' cannot get, list, update, or delete the report at /users/user123/issueReports/report789.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is an existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to air quality sensor data.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user (signed in or not) can read air quality sensor data.
     * @deny (create, update, delete) - No one can create, update, or delete air quality sensor data.
     * @principle Allows public read access.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to disaster alerts.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user (signed in or not) can read disaster alerts.
     * @deny (create, update, delete) - No one can create, update, or delete disaster alerts.
     * @principle Allows public read access.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}