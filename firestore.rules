/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated issue reports.
 * Admins have global read access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/issueReports/{issueReportId}: Stores issue reports created by users.
 * - /adminUsers/{adminUserId}: Stores admin user profiles, granting admin privileges based on document existence.
 * - /aqiSensors/{aqiSensorId}: Stores AQI sensor data. Publicly readable.
 * - /disasterAlerts/{disasterAlertId}: Stores disaster alert information. Publicly readable.
 *
 * Key Security Decisions:
 * - User listing is allowed only for admins.
 * - Issue reports are owned by the user who created them.
 * - AQI sensor data and disaster alerts are publicly readable.
 * - Only existing documents can be updated or deleted.
 *
 * Denormalization for Authorization:
 * - Issue reports store the userId to allow ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read/write access to user profiles based on ownership. Only the user or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their profile.
     * @allow (get, update, delete) User with matching userId can get, update, or delete their profile. Admins can also get, update, or delete.
     * @deny (create) User attempting to create a profile with a different userId.
     * @deny (update, delete) Non-admin user attempting to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) || isAdmin() && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Allows read/write access to issue reports based on ownership. Only the user who created the report or an admin can modify it.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) User with matching userId can create an issue report.
     * @allow (get, list, update, delete) User with matching userId can get, list, update, or delete their own issue reports. Admins can get, list, update, or delete any issue report.
     * @deny (create) User attempting to create an issue report with a different userId.
     * @deny (update, delete) Non-admin user attempting to modify another user's issue report.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/issueReports/{issueReportId} {
        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isAdmin() {
            return exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
        }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId) || isAdmin();
        allow list: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) || isAdmin();
        allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Allows read/write access to admin user profiles.
     * @path /adminUsers/{adminUserId}
     * @allow (create) Only an existing admin can create another admin user.
     * @allow (get, update, delete) Only the admin user themselves or another admin can get, update, or delete.
     * @deny (create) Non-admin user attempting to create an admin user.
     * @deny (update, delete) Non-admin user attempting to modify another admin user's profile.
     * @principle Restricts access to admin user management.
     */
    match /adminUsers/{adminUserId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
      }
      function isOwner(adminUserId) {
        return request.auth.uid == adminUserId;
      }

      function isExistingOwner(adminUserId) {
          return isOwner(adminUserId) && resource != null;
      }

      allow get: if isOwner(adminUserId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin() && request.resource.data.id == adminUserId;
      allow update: if isExistingOwner(adminUserId) || isAdmin() && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(adminUserId) || isAdmin();
    }

    /**
     * @description Allows public read access to AQI sensor data.
     * @path /aqiSensors/{aqiSensorId}
     * @allow (get, list) Anyone can read AQI sensor data.
     * @deny (create, update, delete) No one can create, update, or delete AQI sensor data through the client.
     * @principle Allows public read access to sensor data.
     */
    match /aqiSensors/{aqiSensorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authentication if writes are needed from the client.
    }

    /**
     * @description Allows public read access to disaster alert information.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) Anyone can read disaster alert information.
     * @deny (create, update, delete) No one can create, update, or delete disaster alert information through the client.
     * @principle Allows public read access to alert information.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add authentication if writes are needed from the client.
    }
  }
}