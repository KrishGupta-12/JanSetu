/**
 * @description This ruleset enforces a role-based access control system where users can be citizens or administrators with varying levels of privileges.
 * Data is segregated into collections such as 'users', 'issueReports', 'admins', 'alerts', and 'leaderboard'.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information. Each user can only read/write their own profile.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens. Public read, owner-only writes.
 * - /admins/{email}: Stores admin credentials. Only accessible for reading by authenticated users.
 * - /alerts/{alertId}: Stores platform-wide alerts. Public read, admin-only write.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Public read, no writes from client.
 *
 * @keySecurityDecisions
 * - Users can only manage their own profiles.
 * - Issue reports are publicly readable but only the owner can modify/delete.
 * - Admin credentials are not creatable/updatable/deletable from the client.
 * - Leaderboard is read-only for clients.
 *
 * @denormalizationForAuthorization
 *  - Issue reports MUST contain a `citizenId` field to enforce owner-only writes.
 *
 * @structuralSegregation
 * - User profiles and issue reports are stored in separate collections to maintain clear ownership and permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, list) - User with UID 'user123' can read their profile at /users/user123.
     * @allow (update, delete) - User with UID 'user123' can update/delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, list) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // isOwner() function checks if the request comes from the owner of the document
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue report documents. Allows public read, but restricts create, update, and delete to the owner.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get, list) - Any user (signed in or not) can read issue reports.
     * @allow (create) - User with UID 'user123' can create an issue report with citizenId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete an issue report they own (citizenId matches).
     * @deny (create) - User with UID 'user456' cannot create an issue report with citizenId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete an issue report owned by 'user123'.
     * @principle Allows public reading of issue reports but enforces document ownership for write operations.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Controls access to admin credential documents.  No client-side writes allowed.
     * @path /databases/{database}/documents/admins/{email}
     * @allow (get, list) - Any authenticated user can read the list of admins.
     * @deny (create, update, delete) - No client-side writes are allowed.
     * @principle Read-only access to admin credentials for authenticated users.
     */
    match /admins/{email} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to alert documents. Allows public read, but restricts create, update, and delete to admins only (not implemented in this version).
     * @path /databases/{database}/documents/alerts/{alertId}
     * @allow (get, list) - Any user (signed in or not) can read alerts.
     * @deny (create, update, delete) - No client-side writes are allowed.
     * @principle Allows public reading of alerts but restricts write access.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to leaderboard documents. Allows public read, but restricts create, update, and delete.
     * @path /databases/{database}/documents/leaderboard/{leaderboardId}
     * @allow (get, list) - Any user (signed in or not) can read the leaderboard.
     * @deny (create, update, delete) - No client-side writes are allowed.
     * @principle Read-only access to leaderboard data.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ---- Helper functions ----

    // isSignedIn() function checks if the request is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // isOwner() function checks if the request comes from the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // isExistingOwner() function checks if the request comes from the owner of the document and if the document exists
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}