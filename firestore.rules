/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with varying levels of permissions for citizens, administrators, and super administrators.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable, but writable only with validation.
 * - /superAdmins/{userId}: Indicates super administrator status; only super admins can create/modify.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable, but writable only by super admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable, writable by super admins.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the user themselves.
 * - Issue reports are publicly readable to encourage transparency and community engagement.
 * - Super admin status is managed through the /superAdmins collection, ensuring only authorized personnel have elevated privileges.
 * - Listing of `/users` is denied to prevent data scraping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update) if isExistingOwner(userId)
     * @allow (delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @deny (create) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
     * @allow update: if isSignedIn() && isExistingOwnerOfIssueReport(resource.data.citizenId);
     * @allow delete: if isSignedIn() && isExistingOwnerOfIssueReport(resource.data.citizenId);
     * @deny create if !isSignedIn()
     * @deny update if !isSignedIn()
     * @deny delete if !isSignedIn()
     * @principle Allows public read access, but enforces ownership for writes.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwnerOfIssueReport(resource.data.citizenId);
      allow delete: if isSignedIn() && isExistingOwnerOfIssueReport(resource.data.citizenId);
    }

    /**
     * @description Controls access to super admin status.
     * @path /superAdmins/{userId}
     * @allow get, list, create, update, delete: if isAdmin();
     * @deny get, list, create, update, delete: if !isSignedIn();
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public read access, but restricts write access to administrators.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isSignedIn();
     * @principle Allows public read access, but restricts write access to administrators.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingOwnerOfIssueReport(citizenId) {
        return request.auth.uid == citizenId && resource != null;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}