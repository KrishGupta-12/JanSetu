/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model.
 * - Users can only read and write their own profile data.
 * - Issue reports are publicly readable but writable only with validated citizen ownership.
 * - Super admins are defined by the presence of a document in the `/superAdmins` collection.
 * - Leaderboard data is publicly readable but only writable by a server.
 * - Alerts are publicly readable, but only admins can create them.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, where `{userId}` matches the Firebase Auth UID.
 * - `/issueReports/{reportId}`: Issue reports submitted by citizens.
 * - `/superAdmins/{userId}`: Documents indicating super admin status; document ID is the user's UID.
 * - `/alerts/{alertId}`: Platform-wide alerts.
 * - `/leaderboard/{leaderboardId}`: The leaderboard data (should contain only one document).
 *
 * Key Security Decisions:
 * - Listing of users is disallowed for privacy.
 * - Super admin status is determined by document presence in the `/superAdmins` collection.
 * - Ambiguous writes are denied by default.
 *
 * Denormalization for Authorization:
 * - Issue reports denormalize the `citizenId` to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User can only read, update, or delete their own profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (list) Listing all users is disallowed.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Ensures new profile's ID matches the authenticated user's ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid; // Enforce immutability of uid
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read or list issue reports.
     * @allow (create) Only authenticated users can create reports with a matching citizenId.
     * @allow (update, delete) Only the report's owner can update or delete it.
     * @deny (create) User cannot create a report with a different citizenId.
     * @principle Allows public reads with owner-only writes, enforcing document ownership.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Manages super admin privileges.
     * @path /superAdmins/{userId}
     * @allow (get) Anyone can check if a user is an admin.
     * @allow (create, update, delete) No one can create, update, or delete super admin documents via client SDKs. This is likely managed by a trusted server environment.
     * @deny (list) Listing super admins is disallowed.
     * @principle Uses document existence as a privilege check.
     */
    match /superAdmins/{userId} {
        allow get: if true;
        allow create, update, delete: if false;
        allow list: if false;
    }

    /**
     * @description Controls access to platform-wide alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read or list platform alerts.
     * @allow (create) Only authenticated super admins can create alerts.
     * @deny (update, delete) Alerts can only be managed by admins, not updated or deleted by clients.
     * @principle Allows public reads with restricted writes, based on admin privileges.
     */
    match /alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSuperAdmin() {
        return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isSuperAdmin();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to the leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Anyone can read the leaderboard.
     * @allow (create, update, delete) Leaderboard can only be updated by a trusted server.
     * @principle Restricts writes to a trusted environment.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}