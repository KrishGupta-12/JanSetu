/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization and assumes a flexible data model for prototyping.
 * It enforces user-ownership for user profiles and public read access with owner-only writes for issue reports and alerts.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /issueReports/{reportId}: Stores publicly readable issue reports with owner-only modification rights.
 * - /admins/{email}: Stores administrator credentials, keyed by email.  This collection is not directly accessed by the client.
 * - /alerts/{alertId}: Stores platform alerts, readable by anyone, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted for issue reports and alerts, but writes are strictly controlled.
 * - The 'admins' collection is not secured as it is not accessed from the client app (and is assumed to be managed via the Firebase Admin SDK).
 *
 * Denormalization for Authorization:
 * - Issue Reports: Enforce that `citizenId` matches the authenticated user's UID on creation.
 * - Alerts: Enforce that `adminId` matches the authenticated user's UID on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the current user is the existing owner of the resource.
     *  This function combines the ownership check with a resource existence check for safe updates and deletes.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines a function to check if the current user is a super admin.
     * @returns {boolean} True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'test_user' can create their own profile.
     *    request.auth.uid == 'test_user' && request.resource.data.uid == 'test_user'
     * @allow (get) Any user can read a user profile.
     * @allow (update) User with UID 'test_user' can update their profile.
     *    request.auth.uid == 'test_user' && resource.data.uid == 'test_user'
     * @allow (delete) User with UID 'test_user' can delete their own profile.
     *    request.auth.uid == 'test_user' && resource.data.uid == 'test_user'
     * @deny (create) User with UID 'test_user' cannot create a profile with a mismatched UID.
     *    request.auth.uid == 'test_user' && request.resource.data.uid != 'test_user'
     * @principle Enforces user-ownership: only the authenticated user can create, update, or delete their own profile.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for issue reports.
     * @path /issueReports/{reportId}
     * @allow (create) User with UID 'test_user' can create a new issue report with citizenId 'test_user'.
     *    request.auth.uid == 'test_user' && request.resource.data.citizenId == 'test_user'
     * @allow (get) Any user can read any issue report.
     * @allow (update) User with UID 'test_user' can update the issue report they created.
     *    request.auth.uid == 'test_user' && resource.data.citizenId == 'test_user'
     * @allow (delete) User with UID 'test_user' can delete the issue report they created.
     *    request.auth.uid == 'test_user' && resource.data.citizenId == 'test_user'
     * @deny (create) User with UID 'test_user' cannot create an issue report with a mismatched citizenId.
     *    request.auth.uid == 'test_user' && request.resource.data.citizenId != 'test_user'
     * @principle Allows public read access, but restricts creation, updates, and deletes to the owner (citizen).
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Security rules for alerts.
     * @path /alerts/{alertId}
     * @allow (create) Super admin can create new alerts.
     * @allow (get) Any user can read any alert.
     * @allow (update) Super admin can update alerts.
     * @allow (delete) Super admin can delete alerts.
     * @deny (create) Non-admin users cannot create alerts.
     * @principle Allows public read access, but restricts creation, updates, and deletes to super admins.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSuperAdmin() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSuperAdmin() && resource.data.adminId == request.auth.uid;
      allow delete: if isSuperAdmin() && resource.data.adminId == request.auth.uid;
    }
  }
}