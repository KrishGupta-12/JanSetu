/**
 * @file Overview
 * This ruleset enforces a role-based access control model, where users can be citizens or admins with varying levels of privilege.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles. Accessible to the owner.
 * - `/issueReports/{reportId}`: Stores issue reports. Publicly readable, write access controlled by ownership (citizenId)
 * - `/superAdmins/{userId}`: Flags super admins. Only super admins can manage this collection.
 * - `/alerts/{alertId}`: Stores platform alerts. Publicly readable, write access restricted to super admins.
 * - `/leaderboard/{leaderboardId}`: Stores leaderboard data. Publicly readable, write access restricted to super admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Super admin status is determined by the existence of a document in `/superAdmins/{userId}`.
 * - Role-based access control is implemented using the `hasRole()` helper function.
 * - The `isOwner()` function enforces that only the user with the matching UID can access their own data.
 * - Public read access is granted to the `/issueReports` and `/alerts` collections.
 *
 * Denormalization for Authorization:
 * - Issue reports have a `citizenId` field to enable owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the requesting user's UID matches the {userId} path segment.
     * @deny (get, create, update, delete) if the requesting user's UID does not match the {userId} path segment.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow the user to read their own profile
      allow get: if isOwner(userId);

      // Allow the user to create their own profile if the UID matches
      allow create: if isOwner(userId);

      // Allow the user to update their own profile
      allow update: if isOwner(userId);

      // Allow the user to delete their own profile
      allow delete: if isOwner(userId);

      // Explicitly deny listing of all users
      allow list: if false;
    }

    /**
     * @description Secures issue reports. Publicly readable, only the owner can modify or delete.
     * @path /issueReports/{reportId}
     * @allow (get, list) Anyone can read or list issue reports.
     * @allow (create) Only authenticated users can create reports with their citizenId.
     * @allow (update, delete) Only the owner (citizenId) can update or delete. The document must exist.
     * @deny (create, update, delete) if the above conditions are not met.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /issueReports/{reportId} {
      // Allow anyone to read issue reports
      allow get, list: if true;

      // Allow authenticated users to create issue reports, validating citizenId
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;

      // Function to check if the requesting user is the owner (citizen) of the report
      function isReportOwner(citizenId) {
        return request.auth.uid == citizenId;
      }
      

      // Allow the owner to update the report
      allow update: if isSignedIn() && isReportOwner(resource.data.citizenId) && exists(/databases/$(database)/documents/issueReports/$(reportId));

      // Allow the owner to delete the report
      allow delete: if isSignedIn() && isReportOwner(resource.data.citizenId) && exists(/databases/$(database)/documents/issueReports/$(reportId));
    }

    /**
     * @description Secures super admin list. Only super admins can create, update, or delete.
     * @path /superAdmins/{userId}
     * @allow (get) Anyone can read the super admin list.
     * @allow (create, update, delete) Only super admins can create, update, or delete entries.
     * @deny (create, update, delete) if the above conditions are not met.
     * @principle Restricts management of super admins to other super admins.
     */
    match /superAdmins/{userId} {
        // Function to check if the requesting user is a super admin
        function isSuperAdmin() {
            return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }

        // Allow super admins to read the list
        allow get: if isSuperAdmin();

        // Allow super admins to create entries
        allow create: if isSuperAdmin();
        
        // Allow super admins to update entries
        allow update: if isSuperAdmin() && exists(/databases/$(database)/documents/superAdmins/$(userId));

        // Allow super admins to delete entries
        allow delete: if isSuperAdmin() && exists(/databases/$(database)/documents/superAdmins/$(userId));
        
        // Explicitly deny listing
        allow list: if false;
    }

    /**
     * @description Secures platform alerts. Publicly readable, only admins can create, update, or delete.
     * @path /alerts/{alertId}
     * @allow (get, list) Anyone can read platform alerts.
     * @allow (create, update, delete) Only super admins can manage alerts.
     * @deny (create, update, delete) if the above conditions are not met.
     * @principle Allows public read access while restricting write access to super admins.
     */
    match /alerts/{alertId} {
      // Allow anyone to read alerts
      allow get, list: if true;

      // Allow super admins to create alerts
      allow create: if isSuperAdmin();

      // Allow super admins to update alerts
      allow update: if isSuperAdmin() && exists(/databases/$(database)/documents/alerts/$(alertId));

      // Allow super admins to delete alerts
      allow delete: if isSuperAdmin() && exists(/databases/$(database)/documents/alerts/$(alertId));
    }

    /**
     * @description Secures leaderboard data. Publicly readable, only admins can update.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Anyone can read leaderboard data.
     * @allow (create, update, delete) Only super admins can manage the leaderboard.
     * @deny (create, update, delete) if the above conditions are not met.
     * @principle Allows public read access while restricting write access to super admins.
     */
    match /leaderboard/{leaderboardId} {
      // Allow anyone to read the leaderboard
      allow get, list: if true;

      // Allow super admins to create/update/delete the leaderboard
      allow create: if isSuperAdmin();
      
      allow update: if isSuperAdmin() && exists(/databases/$(database)/documents/leaderboard/$(leaderboardId));
      
      allow delete: if isSuperAdmin() && exists(/databases/$(database)/documents/leaderboard/$(leaderboardId));
    }

    // Define helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
  }
}