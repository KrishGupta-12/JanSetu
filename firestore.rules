/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with citizens, various types of admins, and super admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.  Access is restricted to the owning user, except super admins.
 * - /issueReports/{reportId}: Stores all issue reports. Publicly readable, but writes are restricted to the reporting citizen and admins.
 * - /superAdmins/{userId}: Indicates super admin status. Only super admins can modify this collection.
 * - /alerts/{alertId}: Stores platform-wide alerts. Publicly readable, but creation is restricted to admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Issue reports are publicly readable but can only be created by authenticated users.
 * - Only super admins can manage super admin roles.
 * - Alerts are publicly readable, but only admins can create them.
 * - The leaderboard is publicly readable.
 *
 * Denormalization for Authorization:
 * - Issue reports must include the `citizenId` of the user who created them to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, allowing users to read/write their own data and super admins to read all profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (list) if false
     * @deny (get, update, delete) if !isSignedIn() || (!isOwner(userId) && !isSuperAdmin())
     * @deny (create) if !isSignedIn() || request.auth.uid != userId
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isSuperAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages issue reports. Publicly readable, but only citizens can create reports, and only admins can update or delete.
     * @path /issueReports/{reportId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @deny (update, delete) if true
     * @principle Allows public read access with owner-only writes.  Enforces that citizenId matches the authenticated user on creation.
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if false; // TODO: Add admin validation.
      allow delete: if false; // TODO: Add admin validation.
    }

    /**
     * @description Manages super admin roles. Only super admins can create, update, or delete these documents.
     * @path /superAdmins/{userId}
     * @allow (get) if isSuperAdmin()
     * @allow (create, update, delete) if isSuperAdmin()
     * @deny (get, create, update, delete) if !isSuperAdmin()
     * @principle Restricts super admin role management to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get: if isSuperAdmin();
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Manages platform alerts. Publicly readable, but only admins can create alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() // TODO: More specific role-based permission for alert creation.
     * @deny (update, delete) if true
     * @principle Allows public read access to alerts, but restricts alert creation to admins.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSuperAdmin(); // TODO: Restrict to only admins
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the leaderboard data. Publicly readable, but no one should be able to create, update, or delete it via the client.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Allows public read-only access to the leaderboard.
     */
    match /leaderboard/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}