/**
 * @file Firestore Security Rules for JanSetu Application
 * @version Prototyping
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and issue reports.
 *  Air quality sensors and disaster alerts are publicly readable.
 *
 * @dataStructure
 * - /users/{userId}/userProfile/{userProfileId}: User profiles owned by the user with ID userId. The userProfileId must match the userId.
 * - /users/{userId}/issueReports/{issueReportId}: Issue reports created by the user with ID userId.
 * - /airQualitySensors/{airQualitySensorId}: Publicly available air quality sensor data.
 * - /disasterAlerts/{disasterAlertId}: Publicly available disaster alerts.
 *
 * @keySecurityDecisions
 * - User data (profiles, reports) is strictly owned and controlled by each user.
 * - Air quality and disaster alert data is publicly readable to facilitate broad access to critical information.
 * - Listing of user profiles is disallowed as unnecessary.
 * - No data shape validation is performed in this prototyping phase, except for ownership checks and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user can read, create, update, or delete their profile.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) User with ID 'user123' creates a profile with ID 'user123'.
     * @allow (get) User with ID 'user123' reads their profile with ID 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a profile with ID 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a profile with ID 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      // Get the user profile
      allow get: if isSignedIn() && isOwner(userId);
      // Listing user profiles is disallowed
      allow list: if false;
      // Allows a user to create their own profile if the userId matches
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Allows the user to update their own profile, ensures the document exists, and the userId remains constant
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Allows the user to delete their own profile, ensures the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for issue reports. Only the user can read, create, update, or delete their reports.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) User with ID 'user123' creates a report.
     * @allow (get) User with ID 'user123' reads their report.
     * @deny (create) User with ID 'user123' attempts to create a report for user 'user456'.
     * @deny (get) User with ID 'user123' attempts to read a report for user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      // Get the issue report
      allow get: if isSignedIn() && isOwner(userId);
      // List the issue reports if the user is the owner
      allow list: if isSignedIn() && isOwner(userId);
      // Allows a user to create an issue report
      allow create: if isSignedIn() && isOwner(userId);
      // Allows the user to update their own report, ensures the document exists
      allow update: if isSignedIn() && isExistingOwner(userId);
      // Allows the user to delete their own report, ensures the document exists
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to air quality sensor data.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get) Any user can read air quality sensor data.
     * @allow (list) Any user can list air quality sensor data.
     * @deny (create) No one can create air quality sensor data through client.
     * @deny (update) No one can update air quality sensor data through client.
     * @deny (delete) No one can delete air quality sensor data through client.
     * @principle Allows public read access.
     */
    match /airQualitySensors/{airQualitySensorId} {
      // Allows public read access to air quality sensor data
      allow get, list: if true;
      // No write operations allowed
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to disaster alerts.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get) Any user can read disaster alert data.
     * @allow (list) Any user can list disaster alert data.
     * @deny (create) No one can create disaster alert data through client.
     * @deny (update) No one can update disaster alert data through client.
     * @deny (delete) No one can delete disaster alert data through client.
     * @principle Allows public read access.
     */
    match /disasterAlerts/{disasterAlertId} {
      // Allows public read access to disaster alerts
      allow get, list: if true;
      // No write operations allowed
      allow create, update, delete: if false;
    }

    // Helper function to determine if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to determine if the user is the owner
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to determine if the user is the owner and the document exists
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}