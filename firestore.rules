/**
 * @fileOverview Firestore Security Rules for the JanSetu application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and issue reports,
 * ensuring that only the authenticated user can access their own data. Public read access is
 * granted to air quality sensors and disaster alerts, while write access is implicitly
 * managed (likely through a backend process).
 *
 * Data Structure:
 * - /users/{userId}/userProfile/{userProfileId}: Stores individual user profile data. The
 *   `userId` path parameter MUST match the `id` property of the UserProfile document.
 * - /users/{userId}/issueReports/{issueReportId}: Stores issue reports submitted by a specific user.
 *   The `userId` path parameter indicates ownership.
 * - /airQualitySensors/{airQualitySensorId}: Stores public air quality sensor data.
 * - /disasterAlerts/{disasterAlertId}: Stores public disaster alert information.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Air quality sensors and disaster alerts are publicly readable but lack explicit write
 *   protection in this initial version.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `/users/{userId}/userProfile/{userProfileId}` path enforces that the `userId`
 *   path segment equals the UserProfile's `id` field. This ensures that the rules can
 *   verify ownership without needing to read the document's data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for UserProfile documents.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) - Authenticated user with UID 'user123' can create a profile if userId and userProfileId are 'user123'.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can access/modify a profile where userId and userProfileId are 'user123'.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile under /users/user123/ if their UID does not match.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot access/modify a profile where userId is 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      // Create: Only allow if the authenticated user's ID matches both the userId and userProfileId
      allow create: if isOwner(userId) && request.resource.data.id == userId && userProfileId == userId;

      // Read: Only allow if the authenticated user's ID matches the userId
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Update: Only allow if the authenticated user's ID matches the userId and the user ID is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Delete: Only allow if the authenticated user's ID matches the userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for IssueReport documents.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - Authenticated user with UID 'user123' can create a report under /users/user123/.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can access/modify a report under /users/user123/.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a report under /users/user123/.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot access/modify a report under /users/user123/.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Create: Only allow if the authenticated user's ID matches the userId
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;

      // Read: Only allow if the authenticated user's ID matches the userId
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Update: Only allow if the authenticated user's ID matches the userId and the userId is immutable
      allow update: if isExistingOwner(userId) && resource.data.userProfileId == request.resource.data.userProfileId;

      // Delete: Only allow if the authenticated user's ID matches the userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to AirQualitySensor data. Write access is not explicitly granted,
     *              implying it is managed through a backend process.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) - Any user, authenticated or not, can read air quality sensor data.
     * @deny (create, update, delete) - No one can create, update, or delete air quality sensor data through the client.
     * @principle Provides public read access to sensor data while restricting write access.
     */
    match /airQualitySensors/{airQualitySensorId} {
      // Read: Allow anyone to read air quality sensor data
      allow get, list: if true;

      // Write: Deny all client-side writes.
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to DisasterAlert data. Write access is not explicitly granted,
     *              implying it is managed through a backend process.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user, authenticated or not, can read disaster alert data.
     * @deny (create, update, delete) - No one can create, update, or delete disaster alert data through the client.
     * @principle Provides public read access to disaster alert data while restricting write access.
     */
    match /disasterAlerts/{disasterAlertId} {
      // Read: Allow anyone to read disaster alert data
      allow get, list: if true;

      // Write: Deny all client-side writes.
      allow create, update, delete: if false;
    }
  }
}