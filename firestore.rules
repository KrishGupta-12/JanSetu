/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with citizens and super admins having distinct privileges.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only by the submitter or a super admin.
 * - /superAdmins/{userId}: Documents indicate super admin status; document ID must match the user's UID.
 * - /alerts/{alertId}: Stores platform alerts, writable only by admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, read publicly but write-protected.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Super admins can manage any issue report.
 * - Leaderboard updates are denied to all clients.
 * - Super admin status is determined by the existence of a document in the /superAdmins collection.
 *
 * Denormalization for Authorization:
 * - Issue Reports contain `citizenId`, enabling rules to quickly verify the report's owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && getAfter(resource).data != null;
    }

        /**
         * @description Checks if the user is a super admin by verifying the existence of a document in the /superAdmins collection.
         * @return {boolean} True if the user is a super admin, false otherwise.
         */
        function isSuperAdmin() {
            return exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
        }
    /**
     * @description Grants access to a user's profile.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId} can read their own profile.
     * @allow (create) User with matching {userId} can create their own profile.
     * @allow (update) User with matching {userId} can update their own profile.
     * @deny (create) User cannot create a profile with a mismatched {userId}.
     * @deny (update) User cannot update someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to issue reports, with public read access and owner-or-super-admin write access.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read any issue report.
     * @allow (create) Signed-in user can create a report if they are the submitter.
     * @allow (update) Owner or super admin can update a report.
     * @allow (delete) Owner or super admin can delete a report.
     * @deny (create) User cannot create a report on behalf of another user.
     * @deny (update) User cannot update a report they don't own and are not a super admin.
     * @principle Public read, owner-and-super-admin writes.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if (getAfter(resource).data.citizenId == request.auth.uid || isSuperAdmin());
      allow delete: if getAfter(resource).data.citizenId == request.auth.uid || isSuperAdmin();
    }

    /**
     * @description Controls access to super admin documents.
     * @path /superAdmins/{userId}
     * @allow (get) Anyone can check for super admin status (for UI purposes).
     * @allow (create) Only the backend can create super admin documents.
     * @allow (update) No one can update a super admin document via client SDK.
     * @allow (delete) Only the backend can delete super admin documents.
     * @deny (create) Prevents client-side creation of super admin roles.
     * @deny (update) Prevents client-side modification of super admin roles.
     * @principle Backend-managed super admin roles.
     */
    match /superAdmins/{userId} {
        allow get: if true;
        allow list: if false;
        allow create: if false; // Only the backend can create these.
        allow update: if false;
        allow delete: if false; // Only the backend can delete these.
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read platform alerts.
     * @allow (create) Only super admins can create platform alerts.
     * @deny (create) Non-admins cannot create alerts.
     * @deny (update) No one can update alerts.
     * @deny (delete) No one can delete alerts.
     * @principle Admin-only alert creation, public read.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isSuperAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) Any user can read the leaderboard.
     * @deny (create, update, delete) No one can modify the leaderboard via the client SDK.
     * @principle Public read, backend-only writes.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}