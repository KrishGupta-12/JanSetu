rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource.data != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) User 'abc' creates their own profile with userProfileId matching userId.
     * @allow (get) User 'abc' retrieves their own profile.
     * @allow (update) User 'abc' updates their own profile.
     * @allow (delete) User 'abc' deletes their own profile.
     * @deny (create) User 'abc' attempts to create a profile for user 'def'.
     * @deny (get) User 'abc' attempts to retrieve the profile of user 'def'.
     * @deny (update) User 'abc' attempts to update the profile of user 'def'.
     * @deny (delete) User 'abc' attempts to delete the profile of user 'def'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && userId == userProfileId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for issue reports.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) User 'abc' creates an issue report under their user ID.
     * @allow (get) User 'abc' retrieves their own issue report.
     * @allow (update) User 'abc' updates their own issue report.
     * @allow (delete) User 'abc' deletes their own issue report.
     * @deny (create) User 'abc' attempts to create an issue report for user 'def'.
     * @deny (get) User 'abc' attempts to retrieve an issue report from user 'def'.
     * @deny (update) User 'abc' attempts to update an issue report from user 'def'.
     * @deny (delete) User 'abc' attempts to delete an issue report from user 'def'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for air quality sensors.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get) Any user can read air quality sensor data.
     * @allow (list) Any user can list air quality sensor data.
     * @deny (create) No user can create air quality sensor data.
     * @deny (update) No user can update air quality sensor data.
     * @deny (delete) No user can delete air quality sensor data.
     * @principle Allows public read access but restricts write access to prevent unauthorized modifications.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for disaster alerts.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get) Any user can read disaster alert data.
     * @allow (list) Any user can list disaster alert data.
     * @deny (create) No user can create disaster alert data.
     * @deny (update) No user can update disaster alert data.
     * @deny (delete) No user can delete disaster alert data.
     * @principle Allows public read access but restricts write access to prevent unauthorized modifications.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}