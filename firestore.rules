/**
 * @fileoverview Firestore Security Rules for the Citizen Problem Reporting Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control based on user roles
 * (citizen, department admin, super admin) and resource ownership.  Data validation is
 * relaxed to enable rapid prototyping.  The rules ensure that only authorized users can
 * read or modify specific data, preventing unauthorized access and maintaining data integrity.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /issueReports/{reportId}: Stores issue reports, publicly readable but writable only with proper authorization.
 * - /admins/{email}: Stores admin credentials; only accessible to super admins.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable but creatable only by admins.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent enumeration.
 * - Admin credentials are email-based to simplify management.
 * - Public read access is granted to the /issueReports and /alerts collections.
 * - Owner-only write access is enforced for user profiles.
 * - Alerts can be listed publicly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, list, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get, list) Anyone can read issue reports.
     * @allow (create) Any signed-in user can create an issue report, with a matching citizenId.
     * @allow (update, delete) Only the report's author can update or delete it.
     * @deny (create) If the citizenId does not match the user's UID.
     * @deny (update, delete) If the issue report does not exist.
     * @principle Allows public read access but restricts writes to the report's author.
     */
    match /issueReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

       function isExistingOwner(citizenId) {
        return isOwner(citizenId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.citizenId);
      allow delete: if isExistingOwner(resource.data.citizenId);
    }

    /**
     * @description Controls access to admin credentials.
     * @path /databases/{database}/documents/admins/{email}
     * @allow (get, list) Only super admins can read the list of admins.
     * @allow (create, update, delete) Only super admins can create, update, or delete admin credentials.
     * @deny (create, update, delete, get, list) Non-super admins cannot manage admin credentials.
     * @principle Restricts admin management to super admins only.
     */
    match /admins/{email} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
      }

      allow get, list: if isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to platform alerts.
     * @path /databases/{database}/documents/alerts/{alertId}
     * @allow (get, list) Anyone can read platform alerts.
     * @allow (create) Only admins can create alerts, with a matching adminId.
     * @allow (update, delete) No one can update or delete alerts.
     * @deny (create) If the adminId does not match the user's UID.
     * @principle Allows public read access but restricts alert creation to admins.
     */
    match /alerts/{alertId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'department_admin');
        }

        allow get: if true;
        allow list: if true;
        allow create: if isAdmin() && request.resource.data.adminId == request.auth.uid;
        allow update, delete: if false;
    }
  }
}