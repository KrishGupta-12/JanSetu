/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user data and a combination of user-ownership and admin access for issue reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user or authorized admins can access this data.
 * - /users/{userId}/issueReports/{issueReportId}: Stores issue reports created by the user.  Includes denormalized 'userId' for authorization independence.
 * - /adminUsers/{adminUserId}: Stores admin user profile information. Existence of a document here grants admin privileges.
 * - /aqiSensors/{aqiSensorId}: Stores data for AQI sensors. Publicly readable.
 * - /disasterAlerts/{disasterAlertId}: Stores disaster alert information. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, read, update, and delete issue reports they own.
 * - Listing of issue reports is allowed.
 * - Admin users, identified by their presence in the `/adminUsers` collection, have global read access.
 * - AQI sensor data and disaster alerts are publicly readable. Writes are not currently secured and should be addressed for production.
 *
 * Denormalization for Authorization:
 * - Issue reports store the `userId` of the user who created them, enabling ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Not listable

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for issue reports within a user's subcollection.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) - User with UID 'user123' can create an issue report at /users/user123/issueReports/report456.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their issue report at /users/user123/issueReports/report456.
     * @deny (create) - User with UID 'user456' cannot create an issue report at /users/user123/issueReports/report456.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete the issue report at /users/user123/issueReports/report456.
     * @principle Enforces document ownership for writes within a user-specific subcollection.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages admin user profiles. Existence in this collection grants admin privileges.
     * @path /adminUsers/{adminUserId}
     * @allow (create) - An admin can be created with a valid ID. The triggering actor must have the appropriate credentials (e.g., another admin function).
     * @allow (get, update, delete) - An admin can read, update or delete their own profile using their unique ID.
     * @deny (create) - Non-admin user tries to create an admin profile.
     * @deny (update, delete) - Non-admin user tries to modify/delete an admin profile.
     * @principle Restricts management of admin profiles to authorized personnel.
     */
    match /adminUsers/{adminUserId} {
      function isOwner(adminUserId) {
        return request.auth.uid == adminUserId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(adminUserId);
      allow list: if false; // Not listable.

      allow create: if isSignedIn() && isOwner(adminUserId);
      allow update: if isSignedIn() && isOwner(adminUserId);
      allow delete: if isSignedIn() && isOwner(adminUserId);
    }

    /**
     * @description Allows public read access to AQI sensor data. Writes are not secured in this prototype.
     * @path /aqiSensors/{aqiSensorId}
     * @allow (get, list) - Any user can read AQI sensor data.
     * @deny (create, update, delete) - No one can write to the AQISensors collection.
     * @principle Allows public read access to AQI sensor data.
     */
    match /aqiSensors/{aqiSensorId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add write security
    }

    /**
     * @description Allows public read access to disaster alert information. Writes are not secured in this prototype.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) - Any user can read disaster alert data.
     * @deny (create, update, delete) - No one can write to the DisasterAlerts collection.
     * @principle Allows public read access to disaster alert information.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;

      allow create, update, delete: if false; // TODO: Add write security
    }

    /**
     * @description Allows listing of all Issue Reports
     * @path /issueReports
     * @allow (list) - Any authenticated user can read issue reports.
     * @principle - Any authenticated user can read issue reports.
     */
     match /issueReports {
        function isSignedIn() {
          return request.auth != null;
        }
        allow list: if isSignedIn();
        allow get: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }
  }
}