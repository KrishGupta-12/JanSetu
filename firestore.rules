rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to citizen user profiles.
     * @path /citizens/{citizenId}
     * @allow (create) User with UID 'test_user' can create their own profile with citizenId 'test_user'.
     * @allow (get,update,delete) User with UID 'test_user' can read, update, or delete their own profile with citizenId 'test_user'.
     * @deny (create) User with UID 'test_user' cannot create a profile with citizenId 'another_user'.
     * @deny (get,update,delete) User with UID 'test_user' cannot read, update, or delete another user's profile with citizenId 'another_user'.
     * @principle Enforces document ownership for user profiles.
     */
    match /citizens/{citizenId} {
      // Helper function to check if the request is made by the owner of the document
      function isOwner(citizenId) {
        return request.auth.uid == citizenId;
      }

      allow get: if isOwner(citizenId);
      allow list: if false;
      allow create: if isOwner(citizenId);
      allow update: if isOwner(citizenId);
      allow delete: if isOwner(citizenId);
    }

    /**
     * @description Controls access to admin user profiles. Only admins can manage admin profiles.
     * @path /admins/{adminId}
     * @allow (create) Authenticated admin user can create an admin profile.
     * @allow (get,update,delete) Authenticated admin user can read, update, or delete an admin profile.
     * @deny (create) Non-admin user cannot create an admin profile.
     * @deny (get,update,delete) Non-admin user cannot read, update, or delete an admin profile.
     * @principle Restricts admin profile management to authenticated admins only.
     */
    match /admins/{adminId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
        }

        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to issue reports. Users can create issue reports, but only the owner can modify or delete them.
     * @path /issue_reports/{issueReportId}
     * @allow (create) Authenticated user can create an issue report.
     * @allow (get,list) Any user can read an issue report.
     * @allow (update,delete) Only the owner (citizenId) can update or delete an issue report.
     * @deny (update,delete) Non-owner cannot update or delete an issue report.
     * @principle Enforces ownership for issue report modification and deletion.
     */
    match /issue_reports/{issueReportId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if request.auth.uid == resource.data.citizenId;
        allow delete: if request.auth.uid == resource.data.citizenId;
    }

    /**
     * @description Controls access to user-specific issue reports. Only the user can list their own issue reports.
     * @path /users/{userId}/issue_reports/{issueReportId}
     * @allow (create) Authenticated user can create an issue report under their user ID.
     * @allow (get) Any user can read an issue report.
     * @allow (list) Only the user (userId) can list issue reports under their user ID.
     * @allow (update,delete) Only the owner (citizenId) can update or delete an issue report.
     * @deny (create) User cannot create an issue report under another user's ID.
     * @deny (list) User cannot list issue reports under another user's ID.
     * @principle Restricts access to user-specific issue reports based on user ID.
     */
    match /users/{userId}/issue_reports/{issueReportId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if true;
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if request.auth.uid == resource.data.citizenId;
        allow delete: if request.auth.uid == resource.data.citizenId;
    }

    /**
     * @description Allows public read access to air quality sensor data.
     * @path /air_quality_sensors/{sensorId}
     * @allow (get,list) Any user can read air quality sensor data.
     * @deny (create,update,delete) No user can create, update, or delete air quality sensor data without valid credential. // TODO: Add validation once credential type is implemented.
     * @principle Provides public read access for sensor data.
     */
    match /air_quality_sensors/{sensorId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add validation once credential type is implemented.
    }

    /**
     * @description Allows public read access to disaster alert information.
     * @path /disaster_alerts/{alertId}
     * @allow (get,list) Any user can read disaster alert information.
     * @deny (create,update,delete) No user can create, update, or delete disaster alert information without valid credential. // TODO: Add validation once credential type is implemented.
     * @principle Provides public read access for disaster alerts.
     */
    match /disaster_alerts/{alertId} {
        allow get, list: if true;
        allow create, update, delete: if false;  // TODO: Add validation once credential type is implemented.
    }
  }
}