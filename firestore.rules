/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model, with specific permissions granted to super admins, regular admins, and citizens. User data is secured via ownership. Public data is generally readable, but write access is restricted to authorized users.
 * @data_structure
 *   - /users/{userId}: Stores public user profiles.
 *   - /issueReports/{reportId}: Stores issue reports submitted by citizens.
 *   - /superAdmins/{userId}: Indicates super admin status. Document ID is the user ID.
 *   - /alerts/{alertId}: Stores platform-wide alerts.
 *   - /leaderboard/{leaderboardId}: Stores leaderboard data (single document).
 * @key_security_decisions
 *   - Super admins have broad access to user data and issue reports.
 *   - Regular admins have write access only to alerts.
 *   - Citizens can only create issue reports and read other data.
 *   - User listing is disabled for /users.
 * @denormalization_for_authorization
 *   - Super admin status is determined by the existence of a document in the /superAdmins collection, keyed by the user's UID. This avoids costly queries during rule evaluation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId in the path, allowing self-registration.
     * @allow (get) - Any authenticated user can read any profile.
     * @allow (update, delete) - Only the user themselves can update or delete their profile.
     * @deny (list) - Listing all users is not permitted.
     * @deny (create) - If the user's auth UID does not match the userId in the path.
     * @principle Enforces user ownership for profile management and self-registration.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSelfCreate(userId) && isValidUserProfileCreate();
      allow update: if isExistingOwner(userId) && isValidUserProfileUpdate();
      allow delete: if isExistingOwner(userId);

      // Function to validate UserProfile on create
      function isValidUserProfileCreate() {
          return request.resource.data.uid == userId;
      }
      // Function to validate UserProfile on update
      function isValidUserProfileUpdate() {
          return request.resource.data.uid == resource.data.uid;
      }
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (create) - Any authenticated user can create a report.
     * @allow (get, list) - Any authenticated user can read issue reports.
     * @allow (update, delete) - Only a super admin can update or delete a report.
     * @deny (update, delete) - If the request is not made by a super admin.
     * @principle Allows public read access but restricts write access to super admins.
     */
    match /issueReports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to super admin documents.
     * @path /superAdmins/{userId}
     * @allow (get) - Only super admins can check who else is a super admin.
     * @allow (create) - Only a super admin can grant super admin privileges.
     * @allow (update, delete) - Only a super admin can modify the super admin list.
     * @deny (list) - Listing all super admins is prohibited.
     * @deny (create) - if the document ID doesn't match the request auth UID.
     * @principle Restricts super admin management to existing super admins.
     */
    match /superAdmins/{userId} {
      allow get: if isSuperAdmin();
      allow list: if false;
      allow create: if isSuperAdmin() && isSelfCreate(userId);
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) - All authenticated users can read alerts.
     * @allow (create) - Only authenticated admin users can create alerts.
     * @allow (update, delete) - Only a super admin can update or delete alerts.
     * @deny (create) - If the request is not made by an admin.
     * @deny (update, delete) - If the request is not made by a super admin.
     * @principle Allows public read access but restricts write access to admins and super admins.
     */
    match /alerts/{alertId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to the leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) - Any authenticated user can read the leaderboard.
     * @allow (create, update, delete) - Only a super admin can modify the leaderboard.
     * @deny (create, update, delete) - If the request is not made by a super admin.
     * @principle Allows public read access but restricts write access to super admins.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    // ------ Helper functions ------

    // Checks if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is a super admin by checking for a document in the /superAdmins collection with their UID.
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/superAdmins/$(request.auth.uid));
    }

    // Checks if the user is an admin (either super admin or a regular admin)
    function isAdmin() {
      return isSuperAdmin();
    }

    // Checks if the request is to create a document with the same ID as the user's UID.
    function isSelfCreate(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Checks if the user is the owner of the document and if the document exists.
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}