/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and public read access for issue reports and alerts.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /issueReports/{reportId}: Stores issue reports submitted by citizens.
 * - /admins/{email}: Stores admin credentials.
 * - /alerts/{alertId}: Stores platform alerts.
 *
 * Key Security Decisions:
 * - Users can only read and create their own profile.
 * - Users cannot edit their profile once created.
 * - Issue reports are publicly readable, but creation, updates, and deletion are not permitted in this prototype.
 * - Alerts are publicly readable, but only admins can create, update, or delete them (not implemented in this prototype).
 *
 * Denormalization for Authorization:
 * - For issue reports, the `citizenId` field is used to link the report to the user who created it.
 * - For alerts, the `adminId` field links the alert to the admin who published it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the `uid` matches their `auth.uid`.
     * @deny (create) User attempts to create a profile with a `uid` that does not match their `auth.uid`.
     * @allow (get, list) Any signed-in user can read a user profile.
     * @deny (update, delete) No one is allowed to update or delete a profile.
     * @principle Enforces document ownership for creation and prevents modifications.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing all users is generally not desired.
      allow create: if isSignedIn() && request.resource.data.get('uid') == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to issue reports.
     * @path /issueReports/{reportId}
     * @allow (get, list) Any user can read issue reports.
     * @deny (create, update, delete) No one is allowed to create, update, or delete issue reports in this prototype.
     * @principle Allows public read access for issue reports.
     */
    match /issueReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to admin credentials.
      * @path /admins/{email}
      * @allow (get) Anyone can read admins.
      * @allow (list) Anyone can list admins.
      * @deny (create, update, delete) No one is allowed to create, update, or delete admin credentials in this prototype.
      */
    match /admins/{email} {
        allow get: if true;
        allow list: if false; // Listing admins is generally not desired.
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Controls access to platform alerts.
     * @path /alerts/{alertId}
     * @allow (get, list) Any user can read alerts.
     * @deny (create, update, delete) No one is allowed to create, update, or delete alerts in this prototype.
     * @principle Allows public read access for alerts.
     */
    match /alerts/{alertId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  // Helper function to check if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to check if the request is made by the owner.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}