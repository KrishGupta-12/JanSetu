/**
 * @fileoverview Firestore Security Rules for the Citizen Engagement Platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It strictly enforces user-based authorization and prevents unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves or super admins.
 * - /issueReports/{reportId}: Stores citizen-submitted issue reports, publicly readable, but writable only with valid user ID.
 * - /admins/{email}: Stores admin credentials, which can only be created and managed by super admins.
 * - /alerts/{alertId}: Stores platform alerts, publicly readable, but creatable only by admins.
 * - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable and only modifiable by super admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Role-based access control is implemented for administrative functions.
 * - Data consistency is enforced between user IDs in paths and document fields.
 *
 * Denormalization for Authorization:
 * - Issue Reports contain a `citizenId` field to easily check ownership for updates/deletes.
 * - Alerts contain `adminId` field to check ownership.
 *
 * Structural Segregation:
 * - Admin credentials are stored in a separate `/admins` collection to clearly distinguish them from regular user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issue reports submitted by citizens.
     * @path /issueReports/{reportId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn() && request.resource.data.citizenId == request.auth.uid
     * @allow (update, delete) if isExistingOwnerForReports(resource.data.citizenId)
     * @deny (create) if !isSignedIn()
     * @principle Allows public read access but enforces ownership for updates and deletes.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isExistingOwnerForReports(resource.data.citizenId);
      allow delete: if isExistingOwnerForReports(resource.data.citizenId);
    }

    /**
     * @description Controls access to administrator credentials.
     * @path /admins/{email}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if isSuperAdmin();
     * @allow update: if isSuperAdmin();
     * @allow delete: if isSuperAdmin();
     * @principle Restricts admin management to super admins.
     */
    match /admins/{email} {
        allow get: if isAdmin();
        allow list: if false; // Admin listing is not permitted
        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin();
        allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to platform-wide alerts.
     * @path /alerts/{alertId}
     * @allow get, list: if true;
     * @allow create: if isAdmin();
     * @allow update: if false; // Alerts can only be created, not updated.
     * @allow delete: if false; // Alerts can only be created, not deleted.
     * @principle Allows public read access but restricts creation to administrators.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin() && request.resource.data.adminId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to leaderboard data.
     * @path /leaderboard/{leaderboardId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if isSuperAdmin();
     * @allow delete: if isSuperAdmin();
     * @principle Allows public read access but restricts modifications to super admins.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

   /**
     * @description Checks if the user is the owner of the resource and it exists.
     *              Useful for update and delete operations.
     * @param userId The user ID to check against.
     * @return True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is the owner of the report and it exists.
     *              Useful for update and delete operations.
     * @param citizenId The citizen ID to check against.
     * @return True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwnerForReports(citizenId) {
      return isSignedIn() && request.auth.uid == citizenId && resource != null;
    }

    /**
     * @description Checks if the user has the "super_admin" role.
     * @return True if the user is a super admin, false otherwise.
     */
    function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

     /**
      * @description Checks if the user has any admin role.
      * @return True if the user is an admin, false otherwise.
      */
    function isAdmin() {
        let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
        return isSignedIn() && (userRole == 'super_admin' || userRole == 'waste_admin' || userRole == 'pothole_admin' || userRole == 'streetlight_admin' || userRole == 'water_admin');
    }
  }
}