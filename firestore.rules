/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Access is restricted to the user themselves for modification.
 * - /issueReports/{reportId}: Stores issue reports. Public read, owner-only write.
 * - /admins/{email}: Stores admin credentials. Not intended for client-side access.
 * - /alerts/{alertId}: Stores platform alerts. Public read-only.
 *
 * Key Security Decisions:
 * - Users are not allowed to list all user profiles for privacy reasons.
 * - The '/admins' collection is not secured for client access as it contains sensitive role information. Access to this collection should be managed through the Firebase Admin SDK.
 * - All write operations require a valid, authenticated user.
 *
 * Denormalization for Authorization:
 * - Issue Reports: The `IssueReport` entity requires a `citizenId` field to ensure secure ownership and prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Protects user profile data, allowing only the authenticated user to read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User 'user123' with matching UID creates their profile.
     * @deny (create) User 'user123' attempts to create profile for 'user456'.
     * @allow (get) User 'user123' reads their profile.
     * @deny (get) User 'user123' attempts to read profile for 'user456'.
     * @allow (update) User 'user123' updates their own profile.
     * @deny (update) User 'user123' attempts to update profile for 'user456'.
     * @allow (delete) User 'user123' deletes their own profile.
     * @deny (delete) User 'user123' attempts to delete profile for 'user456'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to issue reports, allowing public reads and owner-only writes.
     * @path /databases/{database}/documents/issueReports/{reportId}
     * @allow (get) Any user can read an issue report.
     * @allow (list) Any user can list issue reports.
     * @allow (create) User 'user123' creates a new issue report with citizenId 'user123'.
     * @deny (create) User 'user123' attempts to create an issue report with citizenId 'user456'.
     * @allow (update) User 'user123' updates their own issue report.
     * @deny (update) User 'user123' attempts to update an issue report owned by 'user456'.
     * @allow (delete) User 'user123' deletes their own issue report.
     * @deny (delete) User 'user123' attempts to delete an issue report owned by 'user456'.
     * @principle Enforces public read access with owner-only writes for issue reports.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.citizenId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.citizenId == request.auth.uid;
    }

    /**
     * @description Secures the admin credentials, which are meant to be managed via the Admin SDK, not client-side.
     * @path /databases/{database}/documents/admins/{email}
     * @allow (get) Nobody.
     * @allow (list) Nobody.
     * @allow (create) Nobody.
     * @allow (update) Nobody.
     * @allow (delete) Nobody.
     * @principle Prevents direct client-side access to admin credentials.
     */
    match /admins/{email} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to platform alerts, allowing public read-only access.
     * @path /databases/{database}/documents/alerts/{alertId}
     * @allow (get) Any user can read a platform alert.
     * @allow (list) Any user can list platform alerts.
     * @deny (create) Any user cannot create a new platform alert.
     * @deny (update) Any user cannot update a platform alert.
     * @deny (delete) Any user cannot delete a platform alert.
     * @principle Enforces public read-only access for platform alerts.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}