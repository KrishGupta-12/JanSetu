/**
 * @description This ruleset enforces a role-based access control model, with special emphasis on protecting user data and managing administrative privileges.
 * @dataStructure
 *  - /users/{userId}: Stores user profiles, accessible primarily to the user themselves.  Super admins and department admins can list users.
 *  - /issueReports/{reportId}: Stores issue reports submitted by citizens, publicly readable but writable only with validation.
 *  - /superAdmins/{userId}: Stores super admin status, only readable and writable by server-side logic.
 *  - /alerts/{alertId}: Stores platform alerts, publicly readable but writable only by admins.
 *  - /leaderboard/{leaderboardId}: Stores leaderboard data, publicly readable but writable only by server-side logic.
 * @keySecurityDecisions
 *  - User listing is restricted to admins and super admins.
 *  - The `superAdmins` collection is not directly modifiable by clients.
 *  - Data validation is limited to fields critical for authorization and relational integrity.
 *  - All write operations require authentication.
 *  - Public read access is granted to the `issueReports` and `alerts` collections, but writes are strictly controlled.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data. Super admins and department admins can list users.
     * @path /users/{userId}
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete /users/user123.
     * @allow (create) - User with UID 'user123' can create /users/user123 if the document's uid field also equals 'user123'.
     * @allow (list) - Super admin or department admin can list all users.
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete /users/user456.
     * @deny (create) - User with UID 'user123' cannot create /users/user456.
     * @principle Enforces document ownership for writes and restricts user listing to admins. Validates ownership on creation and enforces immutability of the uid field.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSuperAdmin() || isDepartmentAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read issue reports, but restricts creation, updates, and deletion to authenticated users with a valid citizenId.
     * @path /issueReports/{reportId}
     * @allow (get, list) - Any user (signed in or not) can read any issue report.
     * @allow (create) - User with UID 'user123' can create an issue report where citizenId is 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete an existing issue report where citizenId is 'user123'.
     * @deny (create) - User with UID 'user123' cannot create an issue report where citizenId is 'user456'.
     * @deny (update, delete) - User with UID 'user123' cannot update/delete an issue report where citizenId is 'user456'.
     * @principle Allows public read access to issue reports but enforces ownership for writes.
     */
    match /issueReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.citizenId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && isReportOwner(resource.data.citizenId);
      allow delete: if isSignedIn() && resource != null && isReportOwner(resource.data.citizenId);
    }

    /**
     * @description Only allows server-side logic (or super admins) to manage super admin documents.
     * @path /superAdmins/{userId}
     * @allow create, update, delete: if false; // TODO: Implement server-side write access.
     * @allow get: if isSuperAdmin();
     * @allow list: if false;
     * @principle Restricts direct client access to the superAdmins collection, ensuring that only trusted server-side code can modify admin privileges.
     */
    match /superAdmins/{userId} {
        allow get: if isSuperAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read alerts, but restricts creation, updates, and deletion to admins.
     * @path /alerts/{alertId}
     * @allow (get, list) - Any user can read any alert.
     * @allow (create) - Admin user can create a new alert.
     * @allow (update, delete) - Admin user can update/delete an existing alert.
     * @deny (create) - Non-admin user cannot create an alert.
     * @deny (update, delete) - Non-admin user cannot update/delete an alert.
     * @principle Allows public read access to alerts but restricts write access to authorized admins.
     */
    match /alerts/{alertId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows anyone to read the leaderboard, but restricts writes to server-side logic.
     * @path /leaderboard/{leaderboardId}
     * @allow (get, list) - Any user can read the leaderboard.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public read access to the leaderboard but restricts write access to server-side logic.
     */
    match /leaderboard/{leaderboardId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSuperAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/superAdmins/$(request.auth.uid)).data.isAdmin == true;
    }

    function isAdmin() {
      return isSignedIn() && (isSuperAdmin() || isDepartmentAdmin());
    }

    function isDepartmentAdmin() {
        return isSignedIn() && (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "waste_admin" ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "pothole_admin" ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "streetlight_admin" ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "water_admin"
        );
    }

    function isReportOwner(citizenId) {
      return isSignedIn() && request.auth.uid == citizenId;
    }
  }
}