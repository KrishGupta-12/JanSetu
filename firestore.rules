/**
 * @file Firestore Security Rules for JanSetu Application
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and issue reports,
 *  while allowing public read access to air quality sensors and disaster alerts.
 * @dataStructure User-specific data is nested under /users/{userId}. Public data resides in top-level collections.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - Ownership is enforced via path-based checks and denormalized data.
 *   - Public read access is granted to /airQualitySensors and /disasterAlerts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profile information.
     * @path /users/{userId}/userProfile/{userProfileId}
     * @allow (create) Signed-in user creates their own profile with matching userId and userProfileId.
     * @allow (get, update, delete) Signed-in user retrieves, updates, or deletes their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @deny (get, update, delete) Signed-in user attempts to retrieve, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations. Validates path consistency.
     */
    match /users/{userId}/userProfile/{userProfileId} {
      // Verify user is signed in
      allow read: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isSelfCreate(userId, request.resource.data.id) && isUserProfileIdMatchesUserId(userId, userProfileId);
      allow update: if isSignedIn() && isExistingOwner(userId) && isUserProfileIdMatchesUserId(userId, userProfileId);
      allow delete: if isSignedIn() && isExistingOwner(userId) && isUserProfileIdMatchesUserId(userId, userProfileId);
    }

    /**
     * @description Enforces owner-only access to issue reports created by a user.
     * @path /users/{userId}/issueReports/{issueReportId}
     * @allow (create) Signed-in user creates an issue report under their user ID.
     * @allow (get, list, update, delete) Signed-in user retrieves, lists, updates, or deletes their own issue reports.
     * @deny (create) Signed-in user attempts to create an issue report for another user.
     * @deny (get, list, update, delete) Signed-in user attempts to retrieve, list, update, or delete another user's issue reports.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/issueReports/{issueReportId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId && isValidIssueReport(request);
      allow update: if isSignedIn() && isExistingOwner(userId) && isIssueReportCreatorImmutable(userId, resource.data.userProfileId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to air quality sensor data, but restricts writes.
     * @path /airQualitySensors/{airQualitySensorId}
     * @allow (get, list) Any user can read air quality sensor data.
     * @deny (create, update, delete) No user can create, update, or delete air quality sensor data.
     * @principle Public read, restricted write access.
     */
    match /airQualitySensors/{airQualitySensorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to disaster alerts, but restricts writes.
     * @path /disasterAlerts/{disasterAlertId}
     * @allow (get, list) Any user can read disaster alerts.
     * @deny (create, update, delete) No user can create, update, or delete disaster alerts.
     * @principle Public read, restricted write access.
     */
    match /disasterAlerts/{disasterAlertId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // --- Helper Functions ---

    // Verifies that the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the request comes from the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the request comes from the owner of the document, and the document exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Verifies the user is creating their own document and that the UserProfile id matches the user id
    function isSelfCreate(userId, profileId) {
        return request.auth.uid == userId && userId == profileId;
    }

    // Checks if the userProfileId matches the userId in the path
    function isUserProfileIdMatchesUserId(userId, userProfileId) {
        return userId == userProfileId;
    }

    // Validation for issue reports to ensure the request is valid
    function isValidIssueReport(request) {
      return request.resource.data.userProfileId == request.auth.uid;
    }

    // Validates that the issueReport Creator ID is immutable on update.
    function isIssueReportCreatorImmutable(userId, creatorId) {
        return userId == creatorId;
    }
  }
}