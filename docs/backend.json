{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the JanSetu application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time the user registered.",
          "format": "date-time"
        },
        "location": {
          "type": "string",
          "description": "The user's current location."
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "registrationDate"
      ]
    },
    "IssueReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IssueReport",
      "type": "object",
      "description": "Represents an issue reported by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the IssueReport entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N IssueReport)"
        },
        "category": {
          "type": "string",
          "description": "Category of the reported issue (e.g., waste, pothole)."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the issue."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the issue's location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the issue's location."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the uploaded image.",
          "format": "uri"
        },
        "reportDate": {
          "type": "string",
          "description": "Date and time the issue was reported.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Current status of the issue (e.g., reported, in progress, resolved)."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "category",
        "description",
        "latitude",
        "longitude",
        "imageUrl",
        "reportDate",
        "status"
      ]
    },
    "AirQualitySensor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AirQualitySensor",
      "type": "object",
      "description": "Represents an air quality sensor and its data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AirQualitySensor entity."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the sensor's location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the sensor's location."
        },
        "aqi": {
          "type": "number",
          "description": "Air Quality Index value."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the AQI reading.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "latitude",
        "longitude",
        "aqi",
        "timestamp"
      ]
    },
    "DisasterAlert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DisasterAlert",
      "type": "object",
      "description": "Represents a disaster alert and its geographical impact zone.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the DisasterAlert entity."
        },
        "alertType": {
          "type": "string",
          "description": "Type of disaster (e.g., flood, earthquake)."
        },
        "severity": {
          "type": "string",
          "description": "Severity of the disaster (e.g., low, medium, high)."
        },
        "polygonCoordinates": {
          "type": "array",
          "description": "Array of coordinates defining the geographical impact zone.",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string",
          "description": "Alert message to be displayed to users."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the alert was issued.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "alertType",
        "severity",
        "polygonCoordinates",
        "message",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. 'userId' defines ownership. userProfileId must equal userId. Includes 'userId' as denormalized field for Authorization Independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "userProfileId",
              "description": "The unique identifier of the user profile. Must match userId."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/issueReports/{issueReportId}",
        "definition": {
          "entityName": "IssueReport",
          "schema": {
            "$ref": "#/backend/entities/IssueReport"
          },
          "description": "Stores issue reports created by a specific user. 'userId' defines ownership. Includes 'userId' as denormalized field for Authorization Independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who created the report."
            },
            {
              "name": "issueReportId",
              "description": "The unique identifier of the issue report."
            }
          ]
        }
      },
      {
        "path": "/airQualitySensors/{airQualitySensorId}",
        "definition": {
          "entityName": "AirQualitySensor",
          "schema": {
            "$ref": "#/backend/entities/AirQualitySensor"
          },
          "description": "Stores data from air quality sensors.",
          "params": [
            {
              "name": "airQualitySensorId",
              "description": "The unique identifier of the air quality sensor."
            }
          ]
        }
      },
      {
        "path": "/disasterAlerts/{disasterAlertId}",
        "definition": {
          "entityName": "DisasterAlert",
          "schema": {
            "$ref": "#/backend/entities/DisasterAlert"
          },
          "description": "Stores disaster alerts with geographical impact zones.",
          "params": [
            {
              "name": "disasterAlertId",
              "description": "The unique identifier of the disaster alert."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages denormalization, structural segregation, and consistent access modeling.\n\n*   **Authorization Independence:** The design avoids hierarchical authorization dependencies by denormalizing authorization context. For instance, IssueReports are stored within a user's subcollection (users/{userId}/issueReports/{issueReportId}), which implicitly grants the user ownership. No `get()` calls are needed to verify ownership.\n*   **Clarity of Intent:** The structure makes authorization intent explicit by using path-based ownership for user-specific data and segregating data with different access needs.\n*   **DBAC (No Custom Claims):** Roles are managed implicitly through path-based ownership (`/users/{userId}/...`).\n*   **QAPs (Rules are not Filters):** The structure supports secure `list` operations by using path-based ownership. Listing issue reports is scoped to a specific user, ensuring that rules don't act as filters.\n*   **Invariants:** Path-based ownership enforces the integrity of ownership, timestamps, and denormalized data.\n\n**Collection Structure Details:**\n\n*   **/users/{userId}/userProfile:** Stores user profile information. The 'userId' in the path inherently defines ownership. The userProfileId will be equal to userId.\n*   **/users/{userId}/issueReports/{issueReportId}:** Stores issue reports created by a specific user. The 'userId' in the path defines the owner of these reports.\n*   **/airQualitySensors/{airQualitySensorId}:** Stores data from air quality sensors.  No specific ownership, so stored at the root level.\n*   **/disasterAlerts/{disasterAlertId}:** Stores disaster alerts with geographical impact zones. No specific ownership, so stored at the root level."
  }
}