{
  "entities": {
    "Citizen": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Citizen",
      "type": "object",
      "description": "Represents a citizen user of the JanSetu application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the citizen."
        },
        "name": {
          "type": "string",
          "description": "Full name of the citizen."
        },
        "email": {
          "type": "string",
          "description": "Email address of the citizen.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the citizen."
        },
        "location": {
          "type": "string",
          "description": "The most recent location of the citizen."
        },
        "dateJoined": {
          "type": "string",
          "description": "Date and time when the citizen joined the application.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "phone",
        "dateJoined"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user of the JanSetu application with elevated privileges.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin user."
        },
        "name": {
          "type": "string",
          "description": "Full name of the admin user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the admin user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "Role of the admin user (e.g., SuperAdmin, Moderator)."
        },
        "dateJoined": {
          "type": "string",
          "description": "Date and time when the admin user was added.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "role",
        "dateJoined"
      ]
    },
    "IssueReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IssueReport",
      "type": "object",
      "description": "Represents an issue reported by a citizen.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the issue report."
        },
        "citizenId": {
          "type": "string",
          "description": "Reference to Citizen. (Relationship: Citizen 1:N IssueReport) The ID of the citizen who reported the issue."
        },
        "category": {
          "type": "string",
          "description": "Category of the reported issue (e.g., Waste, Pothole)."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the reported issue."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the issue's location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the issue's location."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image uploaded by the citizen.",
          "format": "uri"
        },
        "reportDate": {
          "type": "string",
          "description": "Date and time when the issue was reported.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the issue report (e.g., Open, Assigned, Resolved)."
        },
        "assignedAdminId": {
          "type": "string",
          "description": "Reference to Admin. (Relationship: Admin 1:N IssueReport) The ID of the admin assigned to handle the issue. Can be null if not assigned."
        }
      },
      "required": [
        "id",
        "citizenId",
        "category",
        "description",
        "latitude",
        "longitude",
        "imageUrl",
        "reportDate",
        "status"
      ]
    },
    "AirQualitySensor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AirQualitySensor",
      "type": "object",
      "description": "Represents an air quality sensor and its readings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the air quality sensor."
        },
        "latitude": {
          "type": "number",
          "description": "Latitude of the sensor's location."
        },
        "longitude": {
          "type": "number",
          "description": "Longitude of the sensor's location."
        },
        "aqi": {
          "type": "number",
          "description": "Air Quality Index (AQI) reading from the sensor."
        },
        "readingTimestamp": {
          "type": "string",
          "description": "Timestamp of the AQI reading.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "latitude",
        "longitude",
        "aqi",
        "readingTimestamp"
      ]
    },
    "DisasterAlert": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DisasterAlert",
      "type": "object",
      "description": "Represents a disaster alert and its affected geographical zone.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the disaster alert."
        },
        "alertType": {
          "type": "string",
          "description": "Type of disaster alert (e.g., Flood, Earthquake)."
        },
        "polygonCoordinates": {
          "type": "array",
          "description": "Array of [latitude, longitude] coordinates defining the geographical polygon of the affected zone.",
          "items": {
            "type": "number"
          }
        },
        "message": {
          "type": "string",
          "description": "Message content of the disaster alert."
        },
        "severity": {
          "type": "string",
          "description": "Severity level of the disaster alert (e.g., Low, Medium, High)."
        },
        "issuedTimestamp": {
          "type": "string",
          "description": "Timestamp when the disaster alert was issued.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "alertType",
        "polygonCoordinates",
        "message",
        "severity",
        "issuedTimestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/citizens/{citizenId}",
        "definition": {
          "entityName": "Citizen",
          "schema": {
            "$ref": "#/backend/entities/Citizen"
          },
          "description": "Stores citizen user data. Uses document ID as the citizenId.",
          "params": [
            {
              "name": "citizenId",
              "description": "The unique identifier of the citizen."
            }
          ]
        }
      },
      {
        "path": "/admins/{adminId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Stores admin user data.  Existence in this collection grants admin privileges.",
          "params": [
            {
              "name": "adminId",
              "description": "The unique identifier of the admin."
            }
          ]
        }
      },
      {
        "path": "/issue_reports/{issueReportId}",
        "definition": {
          "entityName": "IssueReport",
          "schema": {
            "$ref": "#/backend/entities/IssueReport"
          },
          "description": "Stores issue reports submitted by citizens. Includes denormalized 'citizenId' and 'assignedAdminId' for authorization independence.",
          "params": [
            {
              "name": "issueReportId",
              "description": "The unique identifier of the issue report."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/issue_reports/{issueReportId}",
        "definition": {
          "entityName": "IssueReport",
          "schema": {
            "$ref": "#/backend/entities/IssueReport"
          },
          "description": "Stores issue reports specific to a given user. This duplicates the issue reports data from the /issue_reports collection. Includes denormalized 'citizenId' and 'assignedAdminId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who created issue report."
            },
            {
              "name": "issueReportId",
              "description": "The unique identifier of the issue report."
            }
          ]
        }
      },
      {
        "path": "/air_quality_sensors/{sensorId}",
        "definition": {
          "entityName": "AirQualitySensor",
          "schema": {
            "$ref": "#/backend/entities/AirQualitySensor"
          },
          "description": "Stores air quality sensor data.",
          "params": [
            {
              "name": "sensorId",
              "description": "The unique identifier of the air quality sensor."
            }
          ]
        }
      },
      {
        "path": "/disaster_alerts/{alertId}",
        "definition": {
          "entityName": "DisasterAlert",
          "schema": {
            "$ref": "#/backend/entities/DisasterAlert"
          },
          "description": "Stores disaster alert information.",
          "params": [
            {
              "name": "alertId",
              "description": "The unique identifier of the disaster alert."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the JanSetu application's features, emphasizing security, scalability, and ease of debugging. It incorporates denormalization for authorization independence and structural segregation to ensure consistent security postures. The structure uses path-based ownership for user-generated content (issue reports) and dedicated collections for admins and global roles.\n\nAuthorization Independence is achieved by storing the `citizenId` directly within the `/issue_reports/{issueReportId}` document. This eliminates the need for security rules to perform `get()` operations on parent `Citizen` documents to verify ownership. Admin assignment is handled similarly, with `assignedAdminId` stored directly in the `IssueReport` to avoid complex `get()` calls.\n\nQAPs (Rules are not Filters) is supported by the segregation of data and the use of specific collections for different data types. The path `/users/{userId}/issue_reports/{issueReportId}` provides a secure way to list issue reports created by a specific user. The dedicated `/admins/{adminId}` collection facilitates secure list operations for admin users.\n\nThe use of dedicated collections for `admins` supports global role management via existence checks, avoiding content-based rules."
  }
}